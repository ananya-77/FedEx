<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Employee Hierarchy Analyzer</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/7.8.5/d3.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script src="https://html2canvas.hertzen.com/dist/html2canvas.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Arial, sans-serif;
            background: #f5f5f5;
            min-height: 100vh;
            padding: 20px;
            color: #333;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            border: 1px solid #e0e0e0;
        }

        .header {
            background: linear-gradient(135deg, #4D148C, #660099);
            color: white;
            padding: 30px;
            text-align: center;
            border-bottom: 4px solid #FF6600;
        }

        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            font-weight: 700;
        }

        .header p {
            opacity: 0.9;
            font-size: 1.1rem;
        }

        .upload-section {
            padding: 30px;
            border-bottom: 1px solid #e0e0e0;
        }

        .file-upload {
            position: relative;
            display: inline-block;
            width: 100%;
            margin-bottom: 20px;
        }

        .file-input {
            width: 100%;
            padding: 15px;
            border: 2px dashed #4D148C;
            border-radius: 8px;
            background: #f9f6fc;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
            font-size: 1.1rem;
            color: #4D148C;
        }

        .file-input:hover {
            border-color: #660099;
            background: #f0e6f7;
        }

        #fileInput {
            position: absolute;
            opacity: 0;
            width: 100%;
            height: 100%;
            cursor: pointer;
        }

        .department-select {
            margin-top: 20px;
        }

        select {
            width: 100%;
            padding: 12px;
            border: 2px solid #ddd;
            border-radius: 8px;
            font-size: 1rem;
            background: white;
            cursor: pointer;
            color: #333;
        }

        .results-section {
            padding: 30px;
        }

        .summary-stats {
            display: flex;
            gap: 20px;
            margin-bottom: 30px;
            flex-wrap: wrap;
        }

        .stat-card {
            background: linear-gradient(135deg, #4D148C, #660099);
            color: white;
            padding: 20px;
            border-radius: 8px;
            flex: 1;
            min-width: 150px;
            text-align: center;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            cursor: pointer;
            transition: transform 0.2s ease;
        }

        .stat-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
        }

        .stat-number {
            font-size: 2rem;
            font-weight: bold;
            display: block;
        }

        .stat-label {
            font-size: 0.9rem;
            opacity: 0.9;
        }

        .view-options {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }

        .view-options button {
            padding: 8px 15px;
            border: none;
            border-radius: 5px;
            background: #e0e0e0;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s;
        }

        .view-options button.active {
            background: #4D148C;
            color: white;
        }

        .flowchart-section {
            margin-top: 40px;
            padding: 0;
            background: white;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            display: none;
            height: 800px;
            position: relative;
        }

        .flowchart-header {
            background: linear-gradient(135deg, #4D148C, #660099);
            color: white;
            padding: 20px;
            border-radius: 8px 8px 0 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            position: sticky;
            top: 0;
            z-index: 10;
            border-bottom: 3px solid #FF6600;
        }

        .flowchart-header h2 {
            margin: 0;
            font-size: 1.8rem;
            font-weight: 600;
        }

        .flowchart-options {
            display: flex;
            gap: 10px;
            margin-top: 10px;
            flex-wrap: wrap;
            align-items: center;
        }

        .flowchart-options button {
            padding: 8px 15px;
            border: none;
            border-radius: 5px;
            background: rgba(255, 255, 255, 0.2);
            color: white;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s;
        }

        .flowchart-options button:hover {
            background: rgba(255, 255, 255, 0.3);
        }

        .flowchart-options button.active {
            background: white;
            color: #660099;
        }

        .flowchart-options button.edit-mode {
            background: #FF6600;
            color: white;
        }

        .chart-container {
            width: 100%;
            height: calc(100% - 70px);
            background: white;
            overflow: auto;
            touch-action: none;
        }

        #flowchartContainer {
            width: 100%;
            min-height: 100%;
            position: relative;
        }

        #flowchartContainer svg {
            width: 100%;
            height: 100%;
            display: block;
        }

        .node rect {
            stroke: #333;
            stroke-width: 1.5px;
            rx: 3;
            ry: 3;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .node text {
            font-family: 'Segoe UI', Arial, sans-serif;
            text-anchor: middle;
            fill: #333;
            pointer-events: none;
        }

        .link {
            fill: none;
            stroke: #666;
            stroke-width: 1.5px;
            stroke-linecap: round;
        }

        .department-node rect {
            fill: #4D148C;
        }

        .manager-node rect {
            fill: #660099;
        }

        .manager-node rect:hover {
            fill: #4D148C;
        }

        .manager-node.expanded rect {
            fill: #4D148C;
            stroke: white;
            stroke-width: 2px;
        }

        .job-role-node rect {
            fill: #0071CE;
        }

        .employee-node rect {
            fill: #0099D8;
        }

        .top-level-node rect {
            fill: #0099D8;
        }

        .node-label {
            font-weight: bold;
            fill: white;
        }

        .count-label {
            font-size: 8px;
            fill: rgba(255, 255, 255, 0.9);
        }

        #tooltip {
            position: absolute;
            padding: 10px;
            background: rgba(0, 0, 0, 0.8);
            color: white;
            border-radius: 5px;
            pointer-events: none;
            font-size: 12px;
            opacity: 0;
            transition: opacity 0.3s;
            z-index: 10;
            max-width: 250px;
        }

        #employeeModal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 100;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.3s ease;
        }

        #employeeModal.active {
            opacity: 1;
            pointer-events: all;
        }

        .modal-content {
            background: white;
            border-radius: 10px;
            width: 90%;
            max-width: 800px;
            max-height: 80vh;
            overflow-y: auto;
            padding: 20px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px solid #eee;
        }

        .modal-header h3 {
            margin: 0;
            color: #4D148C;
            font-size: 1.5rem;
        }

        .close-modal {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: #7f8c8d;
        }

        .employee-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 15px;
        }

        .employee-card {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 15px;
            border: 1px solid #e0e0e0;
            transition: transform 0.2s, box-shadow 0.2s;
        }

        .employee-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .employee-card h4 {
            margin-top: 0;
            color: #4D148C;
            border-bottom: 1px solid #ddd;
            padding-bottom: 5px;
            font-size: 1.1rem;
        }

        .employee-card p {
            margin: 5px 0;
            font-size: 0.9rem;
        }

        .employee-card .employee-id {
            font-weight: bold;
            color: #660099;
        }

        .employee-card .employee-location {
            color: #666;
            font-size: 0.85rem;
        }

        .highlight {
            animation: pulse 0.5s ease-in-out;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }

        .fullscreen-chart {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 1000;
            background: white;
            padding: 0;
            margin: 0;
            border-radius: 0;
        }

        .fullscreen-chart .chart-container {
            height: calc(100% - 70px);
        }

        .fullscreen-chart .flowchart-header {
            border-radius: 0;
        }

        .control-panel-wrapper {
            position: relative;
            transition: height 0.3s ease;
            overflow: hidden;
        }

        .control-panel {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 15px;
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            align-items: center;
            transition: all 0.3s ease;
        }

        .control-panel.collapsed {
            height: 50px;
            padding: 10px;
        }

        .control-panel-toggle {
            position: absolute;
            right: 15px;
            top: 10px;
            background: none;
            border: none;
            cursor: pointer;
            font-size: 1.2rem;
            color: #4D148C;
            z-index: 1;
            transition: transform 0.3s ease;
        }

        .control-panel-toggle.collapsed {
            transform: rotate(180deg);
        }

        .control-group {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .control-group label {
            font-weight: 600;
            font-size: 0.9rem;
            min-width: 80px;
            color: #4D148C;
        }

        .control-group input[type="range"] {
            width: 150px;
            accent-color: #660099;
        }

        .control-group .value-display {
            min-width: 30px;
            text-align: center;
            color: #333;
        }

        .history-controls {
            margin-left: auto;
        }

        .size-preview {
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .size-preview-box {
            border: 1px solid #ddd;
            background: #660099;
            display: inline-block;
        }

        .snap-indicator {
            position: absolute;
            pointer-events: none;
            z-index: 100;
            display: none;
            stroke: #FF6600;
            stroke-width: 2px;
            stroke-dasharray: 5,5;
            fill: none;
        }

        .snap-indicator.horizontal {
            width: 100%;
            height: 1px;
        }

        .snap-indicator.vertical {
            width: 1px;
            height: 100%;
        }

        .alignment-guide {
            stroke: #FF6600;
            stroke-width: 2px;
            stroke-dasharray: 5,5;
            fill: none;
            display: none;
        }

        .node-shadow {
            fill: rgba(0,0,0,0.1);
            rx: 3;
            ry: 3;
            display: none;
        }

        .no-data {
            text-align: center;
            padding: 40px;
            color: #7f8c8d;
            font-size: 1.1rem;
        }

        .status {
            margin-top: 15px;
            padding: 10px;
            border-radius: 5px;
            text-align: center;
        }

        .status.success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .status.error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .screenshot-btn {
            background: linear-gradient(135deg, #FF6600, #FF9900);
            color: white;
        }

        .screenshot-btn:hover {
            background: linear-gradient(135deg, #E55C00, #E58800);
        }

        .job-role-group {
            margin-bottom: 15px;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            overflow: hidden;
        }

        .job-role-group-header {
            background: #e8f0fe;
            padding: 10px 15px;
            cursor: pointer;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .job-role-group-header h4 {
            margin: 0;
            color: #1967d2;
        }

        .job-role-group-content {
            display: none;
            padding: 0;
        }

        .job-role-group.expanded .job-role-group-content {
            display: block;
        }

        .employee-list {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .employee-item {
            padding: 10px 15px;
            border-bottom: 1px solid #eee;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .employee-item:last-child {
            border-bottom: none;
        }

        .employee-info {
            flex: 1;
        }

        .employee-info strong {
            display: block;
            margin-bottom: 3px;
        }

        .employee-info span {
            font-size: 0.85rem;
            color: #666;
        }

        .employee-actions {
            display: flex;
            gap: 5px;
        }

        .employee-action-btn {
            padding: 5px 10px;
            background: #4D148C;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.8rem;
            transition: background 0.2s;
        }

        .employee-action-btn:hover {
            background: #660099;
        }

        /* Hierarchy View Styles */
        .hierarchy-view {
            margin-top: 20px;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 8px;
            border: 1px solid #e0e0e0;
            max-height: 500px;
            overflow-y: auto;
        }
        
        .hierarchy-node {
            padding: 10px;
            margin: 5px 0;
            background: white;
            border-radius: 5px;
            border-left: 4px solid #4D148C;
            cursor: pointer;
            transition: all 0.2s;
        }
        
        .hierarchy-node:hover {
            background: #f0e6f7;
        }
        
        .hierarchy-node.manager {
            border-left-color: #660099;
        }
        
        .hierarchy-node.job-role {
            border-left-color: #0071CE;
        }
        
        .hierarchy-node.employee {
            border-left-color: #0099D8;
        }
        
        .hierarchy-children {
            margin-left: 20px;
            padding-left: 15px;
            border-left: 2px dashed #ddd;
        }
        
        .hierarchy-node-title {
            font-weight: 600;
            display: flex;
            justify-content: space-between;
        }
        
        .hierarchy-node-count {
            font-size: 0.85rem;
            color: #666;
        }

        /* Chart View Styles */
        .chart-view {
            margin-top: 20px;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 8px;
            border: 1px solid #e0e0e0;
            max-height: 500px;
            overflow-y: auto;
        }
        
        .chart-node {
            margin: 5px 0;
            background: white;
            border-radius: 5px;
            border: 1px solid #ddd;
            cursor: pointer;
            transition: all 0.2s;
            position: relative;
        }
        
        .chart-node-header {
            padding: 10px;
            background: #4D148C;
            color: white;
            border-radius: 5px 5px 0 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .chart-node-header.manager {
            background: #660099;
        }
        
        .chart-node-header.job-role {
            background: #0071CE;
        }
        
        .chart-node-header.employee {
            background: #0099D8;
        }
        
        .chart-node-content {
            padding: 10px;
            display: none;
        }
        
        .chart-node.expanded .chart-node-content {
            display: block;
        }
        
        .chart-node-title {
            font-weight: 600;
        }
        
        .chart-node-count {
            font-size: 0.85rem;
            opacity: 0.8;
        }
        
        .chart-node-toggle {
            cursor: pointer;
            font-size: 1.2rem;
        }

        /* Edit mode styles */
        .edit-controls {
            position: absolute;
            top: 5px;
            right: 5px;
            display: none;
            gap: 3px;
            z-index: 10;
        }

        .node:hover .edit-controls {
            display: flex;
        }

        .edit-btn, .delete-btn {
            width: 18px;
            height: 18px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 10px;
            cursor: pointer;
            border: none;
            color: white;
        }

        .edit-btn {
            background-color: #FF6600;
        }

        .delete-btn {
            background-color: #e74c3c;
        }

        .resize-handle {
            position: absolute;
            width: 8px;
            height: 8px;
            background-color: white;
            border: 1px solid #333;
            border-radius: 50%;
            cursor: nwse-resize;
            display: none;
            z-index: 10;
        }

        .node:hover .resize-handle {
            display: block;
        }

        .resize-handle.bottom-right {
            right: -4px;
            bottom: -4px;
        }

        /* Edit form styles */
        .edit-form {
            display: none;
            position: absolute;
            background: white;
            padding: 10px;
            border-radius: 5px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.2);
            z-index: 100;
            width: 200px;
        }

        .edit-form input, .edit-form select {
            width: 100%;
            padding: 5px;
            margin-bottom: 5px;
            border: 1px solid #ddd;
            border-radius: 3px;
        }

        .edit-form-buttons {
            display: flex;
            justify-content: space-between;
            margin-top: 5px;
        }

        .edit-form-buttons button {
            padding: 3px 8px;
            border: none;
            border-radius: 3px;
            cursor: pointer;
        }

        .edit-form-save {
            background: #4D148C;
            color: white;
        }

        .edit-form-cancel {
            background: #ddd;
        }

        /* Employee table styles */
        .employee-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 15px;
        }

        .employee-table th, .employee-table td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }

        .employee-table th {
            background-color: #f2f2f2;
        }

        .employee-table tr:nth-child(even) {
            background-color: #f9f9f9;
        }

        .employee-table tr:hover {
            background-color: #f1f1f1;
        }

        .employee-table input {
            width: 100%;
            padding: 5px;
            border: 1px solid #ddd;
            border-radius: 3px;
        }

        .employee-table select {
            width: 100%;
            padding: 5px;
            border: 1px solid #ddd;
            border-radius: 3px;
        }

        .employee-table button {
            padding: 3px 8px;
            background: #4D148C;
            color: white;
            border: none;
            border-radius: 3px;
            cursor: pointer;
        }

        /* Expandable section styles */
        .expandable-section {
            margin-top: 15px;
            border: 1px solid #ddd;
            border-radius: 5px;
            overflow: hidden;
        }

        .expandable-header {
            background-color: #f5f5f5;
            padding: 10px;
            cursor: pointer;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .expandable-content {
            display: none;
            padding: 10px;
            background-color: white;
        }

        .expandable-section.expanded .expandable-content {
            display: block;
        }

        @media (max-width: 768px) {
            .flowchart-header {
                flex-direction: column;
                align-items: flex-start;
            }

            .flowchart-options {
                margin-top: 15px;
                justify-content: flex-start;
            }

            .stat-card {
                min-width: 100%;
            }

            .control-panel {
                flex-direction: column;
                align-items: flex-start;
            }

            .history-controls {
                margin-left: 0;
                margin-top: 10px;
            }

            .employee-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Employee Hierarchy Analyzer</h1>
            <p>Upload Excel or JSON data to visualize your organizational structure</p>
        </div>

        <div class="upload-section">
            <div class="file-upload">
                <div class="file-input">
                    <input type="file" id="fileInput" accept=".json,.xlsx,.xls,.csv" />
                    📁 Click to upload Excel or JSON file
                </div>
            </div>

            <div class="department-select" style="display: none;" id="departmentSelectDiv">
                <label for="departmentSelect"><strong>Select Department:</strong></label>
                <select id="departmentSelect">
                    <option value="">Choose a department...</option>
                </select>
            </div>

            <div id="status"></div>
        </div>

        <div class="results-section" id="resultsSection" style="display: none;">
            <div class="summary-stats" id="summaryStats"></div>

            <div class="view-options">
                <button id="chartViewBtn" class="active">Chart View</button>
                <button id="hierarchyViewBtn">Hierarchy View</button>
                <button id="compactViewBtn">Compact View</button>
            </div>

            <div id="hierarchyView" style="display: none;">
                <div class="hierarchy-view" id="hierarchyTree"></div>
            </div>

            <div id="compactView" style="display: none;">
                <div class="chart-view" id="compactTree"></div>
            </div>

            <div class="flowchart-section" id="flowchartSection">
                <div class="flowchart-header">
                    <h2>📊 Organizational Hierarchy Chart</h2>
                    <div class="flowchart-options">
                        <button id="fullscreenBtn">Fullscreen</button>
                        <button id="editModeBtn">Edit Mode</button>
                        <button id="undoBtn" title="Undo">↩️</button>
                        <button id="redoBtn" title="Redo">↪️</button>
                        <button id="resetLayoutBtn">Reset Layout</button>
                        <button id="saveChartBtn" class="screenshot-btn">Save Screenshot</button>
                    </div>
                </div>

                <div class="control-panel-wrapper">
                    <div class="control-panel" id="controlPanel">
                        <button class="control-panel-toggle" id="controlPanelToggle">▼</button>
                        <div class="control-group">
                            <label for="nodeSizeSlider">Node Size:</label>
                            <input type="range" id="nodeSizeSlider" min="0.5" max="2" step="0.1" value="1">
                            <span class="value-display" id="nodeSizeValue">1.0x</span>
                            <div class="size-preview">
                                <div class="size-preview-box" id="nodeSizePreview" style="width: 20px; height: 20px;"></div>
                            </div>
                        </div>

                        <div class="control-group">
                            <label for="spacingSlider">Spacing:</label>
                            <input type="range" id="spacingSlider" min="0.5" max="2" step="0.1" value="1">
                            <span class="value-display" id="spacingValue">1.0x</span>
                        </div>

                        <div class="control-group">
                            <label for="snapToggle">Snap Alignment:</label>
                            <input type="checkbox" id="snapToggle" checked>
                        </div>

                        <div class="control-group history-controls">
                            <button id="saveLayoutBtn">Save Layout</button>
                        </div>
                    </div>
                </div>

                <div class="chart-container" id="flowchartContainer">
                    <div id="horizontalSnapIndicator" class="snap-indicator horizontal"></div>
                    <div id="verticalSnapIndicator" class="snap-indicator vertical"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- Tooltip -->
    <div id="tooltip"></div>

    <!-- Employee Modal -->
    <div id="employeeModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 id="modalTitle">Employee Details</h3>
                <button class="close-modal" onclick="closeEmployeeModal()">×</button>
            </div>
            <div id="modalContent"></div>
        </div>
    </div>

    <script>
        let employeeData = [];
        let currentDepartment = '';
        let currentLayout = 'vertical';
        let hierarchyData = null;
        let lastClickTime = 0;
        const doubleClickThreshold = 300; // milliseconds for double-tap detection
        let customLayoutSettings = {
            horizontalSpacing: 150,
            verticalSpacing: 80,
            elbowLength: 50,
            nodePositions: {},
            nodeSize: 1.0,
            spacing: 1.0,
            snapEnabled: true
        };

        // History stack for undo/redo
        let historyStack = [];
        let historyPointer = -1;

        // Zoom variables
        let zoom = null;
        let svg = null;
        let g = null;
        let transform = d3.zoomIdentity;
        let links = null;

        // Edit mode state
        let editMode = false;
        let currentlyEditingNode = null;
        let resizeActive = false;
        let originalSize = null;
        let originalPosition = null;

        // Initialize event listeners
        document.getElementById('fileInput').addEventListener('change', handleFileUpload);
        document.getElementById('departmentSelect').addEventListener('change', handleDepartmentChange);
        document.getElementById('saveLayoutBtn').addEventListener('click', saveLayoutSettings);
        document.getElementById('resetLayoutBtn').addEventListener('click', resetLayoutSettings);
        document.getElementById('fullscreenBtn').addEventListener('click', toggleFullscreen);
        document.getElementById('undoBtn').addEventListener('click', undoAction);
        document.getElementById('redoBtn').addEventListener('click', redoAction);
        document.getElementById('nodeSizeSlider').addEventListener('input', updateNodeSize);
        document.getElementById('spacingSlider').addEventListener('input', updateSpacing);
        document.getElementById('saveChartBtn').addEventListener('click', saveChartAsImage);
        document.getElementById('snapToggle').addEventListener('change', toggleSnap);
        document.getElementById('controlPanelToggle').addEventListener('click', toggleControlPanel);
        document.getElementById('editModeBtn').addEventListener('click', toggleEditMode);
        document.getElementById('chartViewBtn').addEventListener('click', () => toggleView('chart'));
        document.getElementById('hierarchyViewBtn').addEventListener('click', () => toggleView('hierarchy'));
        document.getElementById('compactViewBtn').addEventListener('click', () => toggleView('compact'));

        // Load saved layout settings if available
        const savedSettings = localStorage.getItem('customLayoutSettings');
        if (savedSettings) {
            const parsedSettings = JSON.parse(savedSettings);
            customLayoutSettings = {
                ...customLayoutSettings,
                ...parsedSettings
            };
            document.getElementById('nodeSizeSlider').value = customLayoutSettings.nodeSize;
            document.getElementById('spacingSlider').value = customLayoutSettings.spacing;
            document.getElementById('nodeSizeValue').textContent = customLayoutSettings.nodeSize.toFixed(1) + 'x';
            document.getElementById('spacingValue').textContent = customLayoutSettings.spacing.toFixed(1) + 'x';
            document.getElementById('snapToggle').checked = customLayoutSettings.snapEnabled;
            updateNodeSizePreview();
        }

        function toggleControlPanel() {
            const panel = document.getElementById('controlPanel');
            const toggle = document.getElementById('controlPanelToggle');
            panel.classList.toggle('collapsed');
            toggle.classList.toggle('collapsed');
        }

        function toggleEditMode() {
            editMode = !editMode;
            const btn = document.getElementById('editModeBtn');
            btn.classList.toggle('edit-mode', editMode);
            btn.textContent = editMode ? 'Exit Edit Mode' : 'Edit Mode';

            // Show/hide edit controls on all nodes
            d3.selectAll('.edit-controls').style('display', editMode ? 'flex' : 'none');
            d3.selectAll('.resize-handle').style('display', editMode ? 'block' : 'none');

            if (!editMode) {
                // Exit edit mode - hide any active edit forms
                hideEditForm();
            }
        }

        function toggleView(viewType) {
            if (viewType === 'chart') {
                document.getElementById('flowchartSection').style.display = 'block';
                document.getElementById('hierarchyView').style.display = 'none';
                document.getElementById('compactView').style.display = 'none';
                document.getElementById('chartViewBtn').classList.add('active');
                document.getElementById('hierarchyViewBtn').classList.remove('active');
                document.getElementById('compactViewBtn').classList.remove('active');
            } else if (viewType === 'hierarchy') {
                document.getElementById('flowchartSection').style.display = 'none';
                document.getElementById('hierarchyView').style.display = 'block';
                document.getElementById('compactView').style.display = 'none';
                document.getElementById('chartViewBtn').classList.remove('active');
                document.getElementById('hierarchyViewBtn').classList.add('active');
                document.getElementById('compactViewBtn').classList.remove('active');
                renderHierarchyView();
            } else if (viewType === 'compact') {
                document.getElementById('flowchartSection').style.display = 'none';
                document.getElementById('hierarchyView').style.display = 'none';
                document.getElementById('compactView').style.display = 'block';
                document.getElementById('chartViewBtn').classList.remove('active');
                document.getElementById('hierarchyViewBtn').classList.remove('active');
                document.getElementById('compactViewBtn').classList.add('active');
                renderCompactView();
            }
        }

        // Enhanced name normalization with fuzzy matching
        function normalizeName(name) {
            if (!name) return '';

            // Convert to lowercase and remove extra spaces
            let normalized = name.toString().trim().toLowerCase()
                .replace(/\s+/g, ' ') // Replace multiple spaces with single space
                .replace(/[^a-z\s]/g, ''); // Remove special characters

            // Split into parts and sort alphabetically to handle name order variations
            const parts = normalized.split(' ').sort();
            return parts.join(' ');
        }

        // Calculate similarity between two names (0 to 1)
        function nameSimilarity(name1, name2) {
            const normalized1 = normalizeName(name1);
            const normalized2 = normalizeName(name2);

            if (normalized1 === normalized2) return 1.0;

            // Split into parts
            const parts1 = normalized1.split(' ');
            const parts2 = normalized2.split(' ');

            // Count matching parts
            let matches = 0;
            for (const part1 of parts1) {
                for (const part2 of parts2) {
                    if (part1 === part2) {
                        matches++;
                        break;
                    }
                }
            }

            // Calculate similarity score
            const maxLength = Math.max(parts1.length, parts2.length);
            return matches / maxLength;
        }

        // Find best matching employee for a manager name
        function findBestMatch(managerName, employees) {
            let bestMatch = null;
            let bestScore = 0.7; // Minimum similarity threshold

            for (const emp of employees) {
                const score = nameSimilarity(managerName, emp['Employee Name']);
                if (score > bestScore) {
                    bestScore = score;
                    bestMatch = emp;
                }
            }

            return bestMatch;
        }

        function handleFileUpload(event) {
            const file = event.target.files[0];
            if (!file) return;

            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    if (file.name.endsWith('.xlsx') || file.name.endsWith('.xls') || file.name.endsWith('.csv')) {
                        // Process Excel file
                        const data = new Uint8Array(e.target.result);
                        const workbook = XLSX.read(data, { type: 'array' });
                        const firstSheetName = workbook.SheetNames[0];
                        const worksheet = workbook.Sheets[firstSheetName];
                        const jsonData = XLSX.utils.sheet_to_json(worksheet);

                        // Standardize column names (case-insensitive and flexible matching)
                        const standardizedData = jsonData.map(row => {
                            const standardizedRow = {};
                            for (const key in row) {
                                const lowerKey = key.toLowerCase().trim();

                                if (lowerKey.includes('department') || lowerKey === 'dept') {
                                    standardizedRow['Department'] = row[key];
                                } else if ((lowerKey.includes('employee') && lowerKey.includes('name')) ||
                                          lowerKey === 'name' ||
                                          lowerKey === 'full name') {
                                    standardizedRow['Employee Name'] = row[key];
                                } else if ((lowerKey.includes('job') && lowerKey.includes('profile')) ||
                                          lowerKey.includes('title') ||
                                          lowerKey.includes('position')) {
                                    standardizedRow['Job Profile'] = row[key];
                                } else if (lowerKey.includes('location') || lowerKey === 'office') {
                                    standardizedRow['Location'] = row[key];
                                } else if ((lowerKey.includes('reporting') && lowerKey.includes('manager')) ||
                                          lowerKey.includes('manager') ||
                                          lowerKey.includes('supervisor')) {
                                    standardizedRow['Reporting Manager'] = row[key];
                                } else if ((lowerKey.includes('employee') && lowerKey.includes('id')) ||
                                          lowerKey.includes('staff id') ||
                                          lowerKey.includes('emp id')) {
                                    standardizedRow['Employee ID'] = row[key];
                                } else if (lowerKey.includes('email') || lowerKey.includes('mail')) {
                                    standardizedRow['Email'] = row[key];
                                } else if (lowerKey.includes('phone') || lowerKey.includes('mobile') || lowerKey.includes('contact')) {
                                    standardizedRow['Phone'] = row[key];
                                }
                            }
                            return standardizedRow;
                        });

                        employeeData = standardizedData;
                        showStatus('Excel file uploaded successfully! ' + employeeData.length + ' records loaded.', 'success');
                        populateDepartmentSelect();
                    } else {
                        // Process JSON file
                        const jsonData = JSON.parse(e.target.result);
                        employeeData = Array.isArray(jsonData) ? jsonData : [jsonData];

                        // Ensure JSON data has required fields
                        employeeData = employeeData.map(emp => {
                            return {
                                'Department': emp.Department || emp.department || emp.Dept || emp.dept || 'Unknown',
                                'Employee Name': emp['Employee Name'] || emp.employeeName || emp.name || emp.fullName || 'Unknown',
                                'Job Profile': emp['Job Profile'] || emp.jobProfile || emp.title || emp.position || 'Unknown',
                                'Location': emp.Location || emp.location || emp.office || 'Unknown',
                                'Reporting Manager': emp['Reporting Manager'] || emp.reportingManager || emp.manager || emp.supervisor || '',
                                'Employee ID': emp['Employee ID'] || emp.employeeID || emp.staffID || emp.id || '',
                                'Email': emp.Email || emp.email || emp.mail || '',
                                'Phone': emp.Phone || emp.phone || emp.mobile || emp.contact || ''
                            };
                        });

                        showStatus('JSON file uploaded successfully! ' + employeeData.length + ' records loaded.', 'success');
                        populateDepartmentSelect();
                    }
                } catch (error) {
                    showStatus('Error parsing file. Please check the format.', 'error');
                    console.error(error);
                }
            };
            reader.onerror = function() {
                showStatus('Error reading file.', 'error');
            };

            if (file.name.endsWith('.xlsx') || file.name.endsWith('.xls') || file.name.endsWith('.csv')) {
                reader.readAsArrayBuffer(file);
            } else {
                reader.readAsText(file);
            }
        }

        function populateDepartmentSelect() {
            const departments = [...new Set(employeeData.map(emp => emp.Department))].filter(Boolean);
            const select = document.getElementById('departmentSelect');

            select.innerHTML = '<option value="">Choose a department...</option>';
            departments.forEach(dept => {
                const option = document.createElement('option');
                option.value = dept;
                option.textContent = dept;
                select.appendChild(option);
            });

            document.getElementById('departmentSelectDiv').style.display = 'block';
        }

        function handleDepartmentChange(event) {
            currentDepartment = event.target.value;
            if (currentDepartment) {
                generateHierarchyTables();
            } else {
                document.getElementById('resultsSection').style.display = 'none';
            }
        }

        function updateNodeSize() {
            const value = parseFloat(document.getElementById('nodeSizeSlider').value);
            customLayoutSettings.nodeSize = value;
            document.getElementById('nodeSizeValue').textContent = value.toFixed(1) + 'x';
            updateNodeSizePreview();

            if (hierarchyData) {
                pushToHistory();
                renderCombinedFlowChart(hierarchyData);
            }
        }

        function updateNodeSizePreview() {
            const size = customLayoutSettings.nodeSize;
            const baseSize = 20;
            const previewSize = baseSize * size;
            document.getElementById('nodeSizePreview').style.width = `${previewSize}px`;
            document.getElementById('nodeSizePreview').style.height = `${previewSize}px`;
        }

        function updateSpacing() {
            const value = parseFloat(document.getElementById('spacingSlider').value);
            customLayoutSettings.spacing = value;
            document.getElementById('spacingValue').textContent = value.toFixed(1) + 'x';

            if (hierarchyData) {
                pushToHistory();
                renderCombinedFlowChart(hierarchyData);
            }
        }

        function toggleSnap() {
            customLayoutSettings.snapEnabled = document.getElementById('snapToggle').checked;
            saveLayoutSettings();
        }

        function saveLayoutSettings() {
            localStorage.setItem('customLayoutSettings', JSON.stringify(customLayoutSettings));
            showStatus('Layout settings saved!', 'success');
        }

        function resetLayoutSettings() {
            customLayoutSettings.nodePositions = {};
            if (hierarchyData) {
                pushToHistory();
                renderCombinedFlowChart(hierarchyData);
            }
            showStatus('Node positions reset!', 'success');
        }

        function fitChart() {
            if (svg && g) {
                const container = document.getElementById('flowchartContainer');
                const bbox = g.node().getBBox();

                const width = container.clientWidth;
                const height = container.clientHeight;

                const scale = 0.9 / Math.max(bbox.width / width, bbox.height / height);
                const x = (width - bbox.width * scale) / 2 - bbox.x * scale;
                const y = (height - bbox.height * scale) / 2 - bbox.y * scale;

                transform = d3.zoomIdentity.translate(x, y).scale(scale);
                svg.transition().duration(500).call(zoom.transform, transform);
            }
        }

        function toggleFullscreen() {
            const flowchartSection = document.getElementById('flowchartSection');
            const isFullscreen = flowchartSection.classList.contains('fullscreen-chart');

            if (isFullscreen) {
                flowchartSection.classList.remove('fullscreen-chart');
                document.body.style.overflow = 'auto';
            } else {
                flowchartSection.classList.add('fullscreen-chart');
                document.body.style.overflow = 'hidden';
            }

            // Recalculate dimensions after fullscreen change
            setTimeout(() => {
                if (hierarchyData) {
                    renderCombinedFlowChart(hierarchyData);
                }
            }, 100);
        }

        function pushToHistory() {
            // Only keep history up to the current pointer
            historyStack = historyStack.slice(0, historyPointer + 1);

            // Push current state to history
            historyStack.push({
                nodes: JSON.parse(JSON.stringify(hierarchyData.nodes)),
                nodePositions: JSON.parse(JSON.stringify(customLayoutSettings.nodePositions)),
                nodeSize: customLayoutSettings.nodeSize,
                spacing: customLayoutSettings.spacing
            });

            historyPointer = historyStack.length - 1;

            // Limit history to 50 steps
            if (historyStack.length > 50) {
                historyStack.shift();
                historyPointer--;
            }

            updateUndoRedoButtons();
        }

        function undoAction() {
            if (historyPointer > 0) {
                historyPointer--;
                applyHistoryState(historyStack[historyPointer]);
            }
        }

        function redoAction() {
            if (historyPointer < historyStack.length - 1) {
                historyPointer++;
                applyHistoryState(historyStack[historyPointer]);
            }
        }

        function applyHistoryState(state) {
            if (!state) return;

            hierarchyData.nodes = JSON.parse(JSON.stringify(state.nodes));
            customLayoutSettings.nodePositions = JSON.parse(JSON.stringify(state.nodePositions));
            customLayoutSettings.nodeSize = state.nodeSize;
            customLayoutSettings.spacing = state.spacing;

            // Update UI controls
            document.getElementById('nodeSizeSlider').value = state.nodeSize;
            document.getElementById('spacingSlider').value = state.spacing;
            document.getElementById('nodeSizeValue').textContent = state.nodeSize.toFixed(1) + 'x';
            document.getElementById('spacingValue').textContent = state.spacing.toFixed(1) + 'x';
            updateNodeSizePreview();

            // Re-render chart
            renderCombinedFlowChart(hierarchyData);
            updateUndoRedoButtons();
        }

        function updateUndoRedoButtons() {
            document.getElementById('undoBtn').disabled = historyPointer <= 0;
            document.getElementById('redoBtn').disabled = historyPointer >= historyStack.length - 1;
        }

        function generateHierarchyTables() {
            const deptEmployees = employeeData.filter(emp => emp.Department === currentDepartment);

            if (deptEmployees.length === 0) {
                showStatus('No employees found in selected department.', 'error');
                return;
            }

            // Build manager-employee structure with enhanced name matching
            const managerStructure = buildManagerStructure(deptEmployees);

            // Generate summary stats
            generateSummaryStats(deptEmployees, managerStructure);

            // Generate combined flow chart first
            hierarchyData = buildHierarchyData(managerStructure, deptEmployees);
            document.getElementById('flowchartSection').style.display = 'block';
            renderCombinedFlowChart(hierarchyData);

            document.getElementById('resultsSection').style.display = 'block';
        }

        function buildManagerStructure(employees) {
            const managerMap = new Map();
            const employeeMap = new Map();

            // First create a map of all employees with normalized names for matching
            employees.forEach(emp => {
                const normalizedName = normalizeName(emp['Employee Name']);
                employeeMap.set(normalizedName, emp);
            });

            // Group employees by their reporting manager with enhanced fuzzy matching
            employees.forEach(emp => {
                const managerName = emp['Reporting Manager'];
                if (managerName && managerName.trim() !== '') {
                    const normalizedManagerName = normalizeName(managerName);

                    // Try to find the manager in the employee list
                    let managerDetails = employeeMap.get(normalizedManagerName);

                    // If manager not found, try to find a close match
                    if (!managerDetails) {
                        managerDetails = findBestMatch(managerName, employees);
                    }

                    // If manager still not found, create a placeholder
                    if (!managerDetails) {
                        managerDetails = {
                            'Employee Name': managerName,
                            'Job Profile': 'Manager (Details not found)',
                            'Location': 'N/A',
                            'Department': currentDepartment,
                            'Reporting Manager': ''
                        };
                        const normalizedManagerName = normalizeName(managerName);
                        employeeMap.set(normalizedManagerName, managerDetails);
                    }

                    // Find or create manager entry
                    const normalizedKey = normalizeName(managerDetails['Employee Name']);
                    if (!managerMap.has(normalizedKey)) {
                        managerMap.set(normalizedKey, {
                            manager: managerDetails,
                            employees: []
                        });
                    }

                    managerMap.get(normalizedKey).employees.push(emp);
                }
            });

            return managerMap;
        }

        function groupEmployeesByJobRole(employees) {
            const jobRoleGroups = new Map();

            employees.forEach(emp => {
                const jobRole = emp['Job Profile'] || 'Unknown Role';
                if (!jobRoleGroups.has(jobRole)) {
                    jobRoleGroups.set(jobRole, []);
                }
                jobRoleGroups.get(jobRole).push(emp);
            });

            return jobRoleGroups;
        }

        function generateSummaryStats(employees, managerStructure) {
            const totalEmployees = employees.length;
            const managersCount = managerStructure.size;

            const summaryHTML = `
                <div class="stat-card" onclick="showAllEmployees()">
                    <span class="stat-number">${totalEmployees}</span>
                    <span class="stat-label">Total Employees</span>
                </div>
                <div class="stat-card" onclick="showAllManagers()">
                    <span class="stat-number">${managersCount}</span>
                    <span class="stat-label">Reporting Managers</span>
                </div>
            `;

            document.getElementById('summaryStats').innerHTML = summaryHTML;
        }

        function showAllEmployees() {
            const deptEmployees = employeeData.filter(emp => emp.Department === currentDepartment);
            showEmployeeModal({
                name: `All Employees in ${currentDepartment}`,
                type: 'department',
                count: deptEmployees.length,
                employees: deptEmployees,
                fullName: `All ${deptEmployees.length} employees in ${currentDepartment}`
            }, true);
        }

        function showAllManagers() {
            const deptEmployees = employeeData.filter(emp => emp.Department === currentDepartment);
            const managerStructure = buildManagerStructure(deptEmployees);

            const managers = Array.from(managerStructure.values()).map(data => data.manager);

            showEmployeeModal({
                name: `All Managers in ${currentDepartment}`,
                type: 'managers',
                count: managers.length,
                employees: managers,
                fullName: `All ${managers.length} managers in ${currentDepartment}`
            }, true);
        }

        function buildHierarchyData(managerStructure, allEmployees) {
            const nodes = [];
            const links = [];
            let nodeId = 0;

            // Create a map of all employees for quick lookup (with normalized names)
            const employeeMap = new Map();
            allEmployees.forEach(emp => {
                const normalizedName = normalizeName(emp['Employee Name']);
                employeeMap.set(normalizedName, emp);
            });

            // Add department root node
            const rootNode = {
                id: nodeId++,
                name: `${currentDepartment} Department`,
                type: 'department',
                count: allEmployees.length,
                expanded: true
            };
            nodes.push(rootNode);

            // Create a map to track which employees have been processed
            const processedEmployees = new Set();

            // Function to recursively build manager hierarchy
            const buildManagerHierarchy = (managerName, parentNodeId) => {
                const normalizedManagerName = normalizeName(managerName);

                if (processedEmployees.has(normalizedManagerName)) return null; // Prevent cycles

                processedEmployees.add(normalizedManagerName);

                const managerData = managerStructure.get(normalizedManagerName);
                const managerDetails = managerData ? managerData.manager :
                    employeeMap.get(normalizedManagerName) || {
                        'Employee Name': managerName,
                        'Job Profile': 'Manager (Details not found)',
                        'Location': 'N/A',
                        'Department': currentDepartment,
                        'Reporting Manager': ''
                    };

                // Create manager node
                const managerNode = {
                    id: nodeId++,
                    name: managerDetails['Employee Name'] || 'Unknown',
                    type: 'manager',
                    count: managerData ? managerData.employees.length : 0,
                    employees: [managerDetails],
                    fullName: `${managerDetails['Employee Name']} - ${managerDetails['Job Profile']} (${managerDetails['Employee ID'] || 'N/A'})`,
                    expanded: false
                };
                nodes.push(managerNode);

                // Link to parent node
                if (parentNodeId !== undefined) {
                    links.push({
                        source: parentNodeId,
                        target: managerNode.id
                    });
                } else {
                    // Link to department root if no parent
                    links.push({
                        source: rootNode.id,
                        target: managerNode.id
                    });
                }

                // Process this manager's employees
                if (managerData) {
                    const jobRoleGroups = groupEmployeesByJobRole(managerData.employees);

                    jobRoleGroups.forEach((employees, jobRole) => {
                        // Extract first 6 characters of job role as job code
                        const jobCode = jobRole.substring(0, 6).toUpperCase();
                        
                        // Check if we already have a node for this job code
                        const existingJobRoleNode = nodes.find(n => 
                            n.type === 'job-role' && 
                            n.managerId === managerNode.id &&
                            n.name.substring(0, 6).toUpperCase() === jobCode
                        );

                        if (existingJobRoleNode) {
                            // Add employees to existing job role node
                            existingJobRoleNode.employees.push(...employees);
                            existingJobRoleNode.count += employees.length;
                        } else {
                            // Create new job role node
                            const jobRoleNode = {
                                id: nodeId++,
                                name: jobRole,
                                type: 'job-role',
                                count: employees.length,
                                employees: employees,
                                managerId: managerNode.id,
                                hidden: false,
                                fullName: `${jobRole} (${employees.length} employees)`,
                                expanded: false
                            };
                            nodes.push(jobRoleNode);

                            links.push({
                                source: managerNode.id,
                                target: jobRoleNode.id
                            });

                            // Add individual employee nodes (hidden by default)
                            employees.forEach(emp => {
                                const employeeNode = {
                                    id: nodeId++,
                                    name: emp['Employee Name'],
                                    type: 'employee',
                                    count: 1,
                                    employees: [emp],
                                    managerId: managerNode.id,
                                    hidden: true,
                                    fullName: `${emp['Employee Name']} - ${emp['Job Profile']} (${emp['Employee ID'] || 'N/A'})`
                                };
                                nodes.push(employeeNode);

                                links.push({
                                    source: jobRoleNode.id,
                                    target: employeeNode.id
                                });

                                // Check if this employee is also a manager
                                const normalizedEmpName = normalizeName(emp['Employee Name']);
                                if (managerStructure.has(normalizedEmpName)) {
                                    buildManagerHierarchy(emp['Employee Name'], managerNode.id);
                                }
                            });
                        }
                    });
                }

                return managerNode;
            };

            // First process all employees without managers
            const employeesWithoutManagers = allEmployees.filter(emp =>
                !emp['Reporting Manager'] || emp['Reporting Manager'].trim() === ''
            );

            if (employeesWithoutManagers.length > 0) {
                const topLevelGroups = groupEmployeesByJobRole(employeesWithoutManagers);

                topLevelGroups.forEach((employees, jobRole) => {
                    // Extract first 6 characters of job role as job code
                    const jobCode = jobRole.substring(0, 6).toUpperCase();
                    
                    // Check if we already have a node for this job code
                    const existingJobRoleNode = nodes.find(n => 
                        n.type === 'top-level-role' &&
                        n.name.substring(0, 6).toUpperCase() === jobCode
                    );

                    if (existingJobRoleNode) {
                        // Add employees to existing job role node
                        existingJobRoleNode.employees.push(...employees);
                        existingJobRoleNode.count += employees.length;
                    } else {
                        // Create new job role node
                        const jobRoleNode = {
                            id: nodeId++,
                            name: jobRole,
                            type: 'top-level-role',
                            count: employees.length,
                            employees: employees,
                            fullName: `${jobRole} (Top Level)`,
                            expanded: false
                        };
                        nodes.push(jobRoleNode);

                        links.push({
                            source: rootNode.id,
                            target: jobRoleNode.id
                        });

                        // Add individual employee nodes for top-level employees (hidden by default)
                        employees.forEach(emp => {
                            const employeeNode = {
                                id: nodeId++,
                                name: emp['Employee Name'],
                                type: 'employee',
                                count: 1,
                                employees: [emp],
                                fullName: `${emp['Employee Name']} - ${emp['Job Profile']} (${emp['Employee ID'] || 'N/A'})`,
                                hidden: true
                            };
                            nodes.push(employeeNode);

                            links.push({
                                source: jobRoleNode.id,
                                target: employeeNode.id
                            });

                            // Check if this employee is also a manager
                            const normalizedEmpName = normalizeName(emp['Employee Name']);
                            if (managerStructure.has(normalizedEmpName)) {
                                buildManagerHierarchy(emp['Employee Name'], jobRoleNode.id);
                            }
                        });
                    }
                });
            }

            // Then process all managers who haven't been processed yet (managers who don't report to anyone in this department)
            managerStructure.forEach((data, normalizedManagerName) => {
                if (!processedEmployees.has(normalizedManagerName)) {
                    const managerName = data.manager['Employee Name'];
                    buildManagerHierarchy(managerName, rootNode.id);
                }
            });

            return { nodes, links };
        }

        function renderHierarchyView() {
            if (!hierarchyData) return;

            const hierarchyContainer = document.getElementById('hierarchyTree');
            hierarchyContainer.innerHTML = '';

            // Find root node (department)
            const rootNode = hierarchyData.nodes.find(node => node.type === 'department');
            if (!rootNode) return;

            // Recursive function to build hierarchy HTML
            const buildHierarchyHTML = (node, level = 0) => {
                const nodeElement = document.createElement('div');
                nodeElement.className = `hierarchy-node ${node.type}`;
                
                const titleElement = document.createElement('div');
                titleElement.className = 'hierarchy-node-title';
                titleElement.innerHTML = `
                    <span>${node.name}</span>
                    ${node.count ? `<span class="hierarchy-node-count">(${node.count})</span>` : ''}
                `;
                
                nodeElement.appendChild(titleElement);
                
                // Add click handler to expand/collapse
                if (node.type !== 'employee') {
                    nodeElement.addEventListener('click', (e) => {
                        // Don't toggle if clicking on a child element
                        if (e.target !== nodeElement && e.target !== titleElement) return;
                        
                        const childrenContainer = nodeElement.querySelector('.hierarchy-children');
                        if (childrenContainer) {
                            childrenContainer.style.display = childrenContainer.style.display === 'none' ? 'block' : 'none';
                        } else {
                            // First click - load children
                            loadChildren(node, nodeElement);
                        }
                    });
                }
                
                return nodeElement;
            };

            // Function to load children nodes
            const loadChildren = (parentNode, parentElement) => {
                const childrenLinks = hierarchyData.links.filter(link => link.source === parentNode.id);
                const childrenNodes = childrenLinks.map(link => 
                    hierarchyData.nodes.find(node => node.id === link.target)
                ).filter(node => node && !node.hidden);
                
                if (childrenNodes.length === 0) return;
                
                const childrenContainer = document.createElement('div');
                childrenContainer.className = 'hierarchy-children';
                
                childrenNodes.forEach(childNode => {
                    const childElement = buildHierarchyHTML(childNode);
                    childrenContainer.appendChild(childElement);
                });
                
                parentElement.appendChild(childrenContainer);
            };

            // Build the root node
            const rootElement = buildHierarchyHTML(rootNode);
            hierarchyContainer.appendChild(rootElement);
            
            // Load first level of children by default
            loadChildren(rootNode, rootElement);
        }

        function renderCompactView() {
            if (!hierarchyData) return;

            const compactContainer = document.getElementById('compactTree');
            compactContainer.innerHTML = '';

            // Find root node (department)
            const rootNode = hierarchyData.nodes.find(node => node.type === 'department');
            if (!rootNode) return;

            // Recursive function to build compact HTML
            const buildCompactHTML = (node) => {
                const nodeElement = document.createElement('div');
                nodeElement.className = `chart-node ${node.type}`;
                
                const headerElement = document.createElement('div');
                headerElement.className = `chart-node-header ${node.type}`;
                
                const titleElement = document.createElement('span');
                titleElement.className = 'chart-node-title';
                titleElement.textContent = node.name;
                
                const countElement = document.createElement('span');
                countElement.className = 'chart-node-count';
                countElement.textContent = node.count ? `(${node.count})` : '';
                
                const toggleElement = document.createElement('span');
                toggleElement.className = 'chart-node-toggle';
                toggleElement.textContent = '▶';
                
                headerElement.appendChild(titleElement);
                headerElement.appendChild(countElement);
                headerElement.appendChild(toggleElement);
                
                const contentElement = document.createElement('div');
                contentElement.className = 'chart-node-content';
                
                nodeElement.appendChild(headerElement);
                nodeElement.appendChild(contentElement);
                
                // Add click handler to expand/collapse
                if (node.type !== 'employee') {
                    headerElement.addEventListener('click', (e) => {
                        nodeElement.classList.toggle('expanded');
                        toggleElement.textContent = nodeElement.classList.contains('expanded') ? '▼' : '▶';
                        
                        // If expanding and content is empty, load children
                        if (nodeElement.classList.contains('expanded') {
                            if (contentElement.children.length === 0) {
                                loadChildren(node, contentElement);
                            }
                        }
                    });
                }
                
                return nodeElement;
            };

            // Function to load children nodes
            const loadChildren = (parentNode, parentElement) => {
                const childrenLinks = hierarchyData.links.filter(link => link.source === parentNode.id);
                const childrenNodes = childrenLinks.map(link => 
                    hierarchyData.nodes.find(node => node.id === link.target)
                ).filter(node => node && !node.hidden);
                
                if (childrenNodes.length === 0) return;
                
                childrenNodes.forEach(childNode => {
                    const childElement = buildCompactHTML(childNode);
                    parentElement.appendChild(childElement);
                });
            };

            // Build the root node
            const rootElement = buildCompactHTML(rootNode);
            compactContainer.appendChild(rootElement);
            
            // Expand root node by default and load first level of children
            rootElement.classList.add('expanded');
            rootElement.querySelector('.chart-node-toggle').textContent = '▼';
            loadChildren(rootNode, rootElement.querySelector('.chart-node-content'));
        }

        function renderCombinedFlowChart(data) {
            const container = d3.select('#flowchartContainer');
            container.selectAll("*").remove();

            // Calculate required dimensions based on hierarchy depth and breadth
            const hierarchyDepth = getHierarchyDepth(data);
            const hierarchyBreadth = getHierarchyBreadth(data);

            // Set very large dimensions to accommodate big hierarchies
            const width = Math.max(3000, hierarchyBreadth * 400 * customLayoutSettings.spacing);
            const height = Math.max(3000, hierarchyDepth * 250 * customLayoutSettings.spacing);
            const margin = { top: 40, right: 120, bottom: 40, left: 120 };

            svg = container.append('svg')
                .attr('width', '100%')
                .attr('height', '100%')
                .attr('viewBox', `0 0 ${width} ${height}`)
                .call(d3.zoom()
                    .scaleExtent([0.1, 5])
                    .on('zoom', (event) => {
                        g.attr('transform', event.transform);
                        transform = event.transform;
                        updateLinks(); // Update links when zooming/panning
                    }))
                .on('dblclick.zoom', null); // Disable double-click zoom

            g = svg.append('g')
                .attr('transform', `translate(${margin.left},${margin.top})`);

            // Add alignment guides
            g.append('path').attr('class', 'alignment-guide horizontal');
            g.append('path').attr('class', 'alignment-guide vertical');

            // Create hierarchical layout
            const root = d3.stratify()
                .id(d => d.id)
                .parentId(d => {
                    const link = data.links.find(l => l.target === d.id);
                    return link ? link.source : null;
                })(data.nodes);

            // Custom tree layout with dynamic spacing
            const treeLayout = d3.tree()
                .size([width - margin.left - margin.right, height - margin.top - margin.bottom])
                .separation((a, b) => (a.parent === b.parent ? 1 : 1.5) / a.depth * customLayoutSettings.spacing);

            const treeData = treeLayout(root);

            // Apply custom positions if they exist
            treeData.each(node => {
                if (customLayoutSettings.nodePositions[node.data.id]) {
                    const pos = customLayoutSettings.nodePositions[node.data.id];
                    if (pos.x !== undefined && pos.y !== undefined) {
                        node.x = pos.x;
                        node.y = pos.y;
                    }
                }
            });

            // Create elbow links
            links = g.selectAll('.link')
                .data(treeData.links().filter(d => !d.target.data.hidden))
                .enter().append('path')
                .attr('class', 'link')
                .style('fill', 'none')
                .style('stroke', '#666')
                .style('opacity', 0.8)
                .style('stroke-width', 1.5 * customLayoutSettings.nodeSize);

            // Update links initially
            updateLinks();

            // Calculate base node dimensions
            const baseDimensions = {
                department: { width: 180, height: 50, fontSize: 14 },
                manager: { width: 150, height: 45, fontSize: 12 },
                'job-role': { width: 130, height: 40, fontSize: 11 },
                'top-level-role': { width: 130, height: 40, fontSize: 11 },
                employee: { width: 120, height: 35, fontSize: 10 }
            };

            // Create nodes with double-tap functionality
            const node = g.selectAll('.node')
                .data(treeData.descendants().filter(d => !d.data.hidden))
                .enter().append('g')
                .attr('class', d => `node ${d.data.type}-node ${d.data.expanded ? 'expanded' : ''}`)
                .attr('transform', d => `translate(${d.x},${d.y})`)
                .on('click', function(event, d) {
                    const now = Date.now();
                    const isDoubleClick = (now - lastClickTime) < doubleClickThreshold;
                    lastClickTime = now;

                    if (editMode) {
                        // In edit mode, don't handle normal clicks
                        return;
                    }

                    if (isDoubleClick && (d.data.type === 'manager' || d.data.type === 'job-role' || d.data.type === 'top-level-role')) {
                        // Double-click on manager or job role - show all employees directly
                        d3.select(this).classed('highlight', true);
                        setTimeout(() => d3.select(this).classed('highlight', false), 500);

                        // Collect all employees under this node
                        let allEmployees = [];
                        if (d.data.type === 'manager') {
                            data.nodes.forEach(n => {
                                if ((n.type === 'job-role' || n.type === 'employee') && n.managerId === d.data.id) {
                                    allEmployees.push(...n.employees);
                                }
                            });
                        } else {
                            allEmployees = d.data.employees || [];
                        }

                        // Show in modal
                        showEmployeeModal({
                            name: d.data.name,
                            type: d.data.type,
                            count: allEmployees.length,
                            employees: allEmployees,
                            fullName: `All employees under ${d.data.name}`
                        });
                    } else if (d.data.type === 'manager' || d.data.type === 'job-role' || d.data.type === 'top-level-role') {
                        // Single click - toggle expansion of children
                        pushToHistory();

                        const wasExpanded = d.data.expanded;
                        d.data.expanded = !wasExpanded;

                        // For managers, toggle employees visibility
                        if (d.data.type === 'manager') {
                            data.nodes.forEach(n => {
                                if (n.type === 'employee' && n.managerId === d.data.id) {
                                    n.hidden = !d.data.expanded;
                                }
                            });
                        }
                        // For job roles, toggle employees visibility
                        else if (d.data.type === 'job-role' || d.data.type === 'top-level-role') {
                            data.nodes.forEach(n => {
                                if (n.type === 'employee' && data.links.some(l => l.source === d.data.id && l.target === n.id)) {
                                    n.hidden = !d.data.expanded;
                                }
                            });
                        }

                        renderCombinedFlowChart(data);
                    } else if (d.data.type === 'employee') {
                        // Single click on employee - show employee details
                        showEmployeeModal(d.data);
                    }
                })
                .on('mouseover', function(event, d) {
                    showTooltip(event, d.data);
                })
                .on('mouseout', hideTooltip)
                .call(d3.drag()
                    .on('start', dragstarted)
                    .on('drag', dragged)
                    .on('end', dragended));

            // Add shadow placeholder for dragging
            node.append('rect')
                .attr('class', 'node-shadow')
                .attr('width', d => baseDimensions[d.data.type].width * customLayoutSettings.nodeSize)
                .attr('height', d => baseDimensions[d.data.type].height * customLayoutSettings.nodeSize)
                .attr('x', d => -baseDimensions[d.data.type].width * customLayoutSettings.nodeSize / 2)
                .attr('y', d => -baseDimensions[d.data.type].height * customLayoutSettings.nodeSize / 2);

            // Add rectangles for nodes with scaled dimensions
            node.append('rect')
                .attr('width', d => baseDimensions[d.data.type].width * customLayoutSettings.nodeSize)
                .attr('height', d => baseDimensions[d.data.type].height * customLayoutSettings.nodeSize)
                .attr('x', d => -baseDimensions[d.data.type].width * customLayoutSettings.nodeSize / 2)
                .attr('y', d => -baseDimensions[d.data.type].height * customLayoutSettings.nodeSize / 2)
                .style('fill', d => {
                    switch(d.data.type) {
                        case 'department': return '#4D148C';
                        case 'manager': return d.data.expanded ? '#4D148C' : '#660099';
                        case 'job-role': return '#0071CE';
                        case 'employee': return '#0099D8';
                        case 'top-level-role': return '#0099D8';
                        default: return '#95a5a6';
                    }
                })
                .style('stroke', d => d.data.expanded ? 'white' : '#333')
                .style('stroke-width', d => d.data.expanded ? '2px' : '1.5px');

            // Add edit controls if in edit mode
            node.append('foreignObject')
                .attr('class', 'edit-controls')
                .attr('width', d => baseDimensions[d.data.type].width * customLayoutSettings.nodeSize)
                .attr('height', d => baseDimensions[d.data.type].height * customLayoutSettings.nodeSize)
                .attr('x', d => -baseDimensions[d.data.type].width * customLayoutSettings.nodeSize / 2)
                .attr('y', d => -baseDimensions[d.data.type].height * customLayoutSettings.nodeSize / 2)
                .style('display', editMode ? 'flex' : 'none')
                .append('xhtml:div')
                .style('width', '100%')
                .style('height', '100%')
                .style('position', 'relative')
                .html(d => `
                    <div style="position: absolute; top: 5px; right: 5px; display: flex; gap: 3px;">
                        <button class="edit-btn" onclick="showEditForm(event, ${d.data.id})">✏️</button>
                        <button class="delete-btn" onclick="deleteNode(event, ${d.data.id})">🗑️</button>
                    </div>
                    <div class="resize-handle bottom-right"
                         onmousedown="startResize(event, ${d.data.id})"
                         style="display: ${editMode ? 'block' : 'none'}"></div>
                `);

            // Add text labels with scaled font size
            node.append('text')
                .attr('dy', '0.35em')
                .attr('text-anchor', 'middle')
                .style('font-size', d => `${baseDimensions[d.data.type].fontSize * customLayoutSettings.nodeSize}px`)
                .style('font-weight', 'bold')
                .style('fill', 'white')
                .text(d => {
                    const maxLength = d.data.type === 'department' ? 20 : 15;
                    return d.data.name.length > maxLength ?
                           d.data.name.substring(0, maxLength) + '...' :
                           d.data.name;
                });

            // Add count labels for managers and roles
            node.filter(d => d.data.type === 'manager' || d.data.type === 'top-level-role' || d.data.type === 'job-role')
                .append('text')
                .attr('dy', '1.2em')
                .attr('text-anchor', 'middle')
                .style('font-size', d => `${10 * customLayoutSettings.nodeSize}px`)
                .style('fill', 'rgba(255,255,255,0.9)')
                .text(d => `(${d.data.count})`);

            function updateLinks() {
                links.attr('d', d => {
                    const sourceX = d.source.x;
                    const sourceY = d.source.y;
                    const targetX = d.target.x;
                    const targetY = d.target.y;

                    const elbowLength = customLayoutSettings.elbowLength * customLayoutSettings.spacing;

                    return `M${sourceX},${sourceY}
                            V${sourceY + elbowLength}
                            H${targetX}
                            V${targetY}`;
                });
            }

            function dragstarted(event, d) {
                if (editMode) {
                    event.sourceEvent.stopPropagation();
                    return;
                }

                d3.select(this).raise().classed('active', true);
                d3.select(this).select('.node-shadow')
                    .attr('display', null)
                    .attr('width', baseDimensions[d.data.type].width * customLayoutSettings.nodeSize)
                    .attr('height', baseDimensions[d.data.type].height * customLayoutSettings.nodeSize);

                hideAlignmentGuides();
            }

            function dragged(event, d) {
                if (editMode) {
                    event.sourceEvent.stopPropagation();
                    return;
                }

                // Get the transformed coordinates (accounting for zoom/pan)
                const [x, y] = d3.pointer(event, svg.node());
                const inverted = transform.invert([x, y]);

                let newX = inverted[0];
                let newY = inverted[1];

                // Snap to nearby nodes if enabled
                if (customLayoutSettings.snapEnabled) {
                    const snapThreshold = 20;
                    let snapX = null, snapY = null;
                    let showHorizontalGuide = false, showVerticalGuide = false;

                    // Check for nearby nodes to snap to (excluding self)
                    treeData.descendants().forEach(node => {
                        if (node.data.id !== d.data.id && !node.data.hidden) {
                            const nodeX = node.x;
                            const nodeY = node.y;

                            // Check horizontal alignment
                            if (Math.abs(newY - nodeY) < snapThreshold) {
                                snapY = nodeY;
                                showHorizontalGuide = true;
                            }

                            // Check vertical alignment
                            if (Math.abs(newX - nodeX) < snapThreshold) {
                                snapX = nodeX;
                                showVerticalGuide = true;
                            }
                        }
                    });

                    // Show alignment guides
                    if (showHorizontalGuide || showVerticalGuide) {
                        showAlignmentGuides(d, showHorizontalGuide, showVerticalGuide);
                    } else {
                        hideAlignmentGuides();
                    }

                    if (snapX !== null) newX = snapX;
                    if (snapY !== null) newY = snapY;
                } else {
                    hideAlignmentGuides();
                }

                // Update node position
                d.x = newX;
                d.y = newY;

                // Update the node's position in our custom settings
                if (!customLayoutSettings.nodePositions[d.data.id]) {
                    customLayoutSettings.nodePositions[d.data.id] = {};
                }
                customLayoutSettings.nodePositions[d.data.id].x = newX;
                customLayoutSettings.nodePositions[d.data.id].y = newY;

                // Update the visual position
                d3.select(this).attr('transform', `translate(${newX},${newY})`);

                // Update all links connected to this node
                updateLinks();
            }

            function dragended(event, d) {
                if (editMode) {
                    event.sourceEvent.stopPropagation();
                    return;
                }

                d3.select(this).classed('active', false);
                d3.select(this).select('.node-shadow').attr('display', 'none');
                hideAlignmentGuides();
                pushToHistory();
            }

            function showAlignmentGuides(node, showHorizontal, showVertical) {
                const nodeX = node.x;
                const nodeY = node.y;
                const width = baseDimensions[node.data.type].width * customLayoutSettings.nodeSize;
                const height = baseDimensions[node.data.type].height * customLayoutSettings.nodeSize;

                if (showHorizontal) {
                    g.select('.alignment-guide.horizontal')
                        .attr('d', `M${nodeX - width},${nodeY}H${nodeX + width}`)
                        .attr('display', null);
                }

                if (showVertical) {
                    g.select('.alignment-guide.vertical')
                        .attr('d', `M${nodeX},${nodeY - height}V${nodeY + height}`)
                        .attr('display', null);
                }
            }

            function hideAlignmentGuides() {
                g.selectAll('.alignment-guide').attr('display', 'none');
            }

            // Fit the chart to view initially
            setTimeout(fitChart, 100);
        }

        function getHierarchyDepth(data) {
            let maxDepth = 0;
            const nodeMap = new Map();

            // Build node map
            data.nodes.forEach(node => {
                nodeMap.set(node.id, { ...node, depth: 0, children: [] });
            });

            // Build tree structure
            data.links.forEach(link => {
                const parent = nodeMap.get(link.source);
                const child = nodeMap.get(link.target);
                if (parent && child) {
                    parent.children.push(child);
                }
            });

            // Calculate depths
            const calculateDepth = (node, depth) => {
                node.depth = depth;
                maxDepth = Math.max(maxDepth, depth);
                node.children.forEach(child => calculateDepth(child, depth + 1));
            };

            // Start from root (assuming first node is root)
            if (data.nodes.length > 0) {
                calculateDepth(nodeMap.get(data.nodes[0].id), 0);
            }

            return maxDepth + 1; // Add 1 because depth starts at 0
        }

        function getHierarchyBreadth(data) {
            let maxBreadth = 0;
            const nodeMap = new Map();

            // Build node map
            data.nodes.forEach(node => {
                nodeMap.set(node.id, { ...node, breadth: 0, children: [] });
            });

            // Build tree structure
            data.links.forEach(link => {
                const parent = nodeMap.get(link.source);
                const child = nodeMap.get(link.target);
                if (parent && child) {
                    parent.children.push(child);
                }
            });

            // Calculate breadth at each level
            const levelMap = new Map();

            const calculateBreadth = (node, level) => {
                if (!levelMap.has(level)) {
                    levelMap.set(level, 0);
                }
                levelMap.set(level, levelMap.get(level) + 1);
                maxBreadth = Math.max(maxBreadth, levelMap.get(level));
                node.children.forEach(child => calculateBreadth(child, level + 1));
            };

            // Start from root (assuming first node is root)
            if (data.nodes.length > 0) {
                calculateBreadth(nodeMap.get(data.nodes[0].id), 0);
            }

            return maxBreadth;
        }

        function getMostCommonLocation(employees) {
            const locationCounts = {};
            employees.forEach(emp => {
                const location = emp['Location'] || 'N/A';
                locationCounts[location] = (locationCounts[location] || 0) + 1;
            });

            return Object.keys(locationCounts).reduce((a, b) =>
                locationCounts[a] > locationCounts[b] ? a : b
            );
        }

        function showEmployeeModal(nodeData, showTable = false) {
            const modal = document.getElementById('employeeModal');
            const modalTitle = document.getElementById('modalTitle');
            const modalContent = document.getElementById('modalContent');

            modalTitle.textContent = nodeData.fullName || `${nodeData.name} - Employee Details`;

            // Create expand/collapse controls if showing multiple employees
            let controlsHTML = '';
            if (nodeData.employees.length > 1) {
                controlsHTML = `
                    <div class="expand-collapse-controls">
                        <button class="expand-collapse-btn" onclick="expandAllGroups()">Expand All</button>
                        <button class="expand-collapse-btn" onclick="collapseAllGroups()">Collapse All</button>
                        ${showTable ? `<button class="expand-collapse-btn" onclick="toggleEmployeeTable()">Show Table View</button>` : ''}
                    </div>
                `;
            }

            // Group employees by job role if showing multiple employees
            let employeeCardsHTML = '';
            if (nodeData.employees.length > 1) {
                if (nodeData.type === 'manager') {
                    // Show manager details at the top
                    const manager = nodeData.employees[0]; // First employee is the manager
                    employeeCardsHTML += `
                        <div class="employee-card" style="margin-bottom: 20px;">
                            <h4>👨‍💼 Manager Details</h4>
                            <p><strong>Name:</strong> ${manager['Employee Name'] || 'N/A'}</p>
                            <p><strong>Employee ID:</strong> <span class="employee-id">${manager['Employee ID'] || 'N/A'}</span></p>
                            <p><strong>Job Profile:</strong> ${manager['Job Profile'] || 'N/A'}</p>
                            <p><strong>Department:</strong> ${manager['Department'] || 'N/A'}</p>
                            <p><strong>Location:</strong> <span class="employee-location">${manager['Location'] || 'N/A'}</span></p>
                            ${manager['Email'] ? `<p><strong>Email:</strong> ${manager['Email']}</p>` : ''}
                            ${manager['Phone'] ? `<p><strong>Phone:</strong> ${manager['Phone']}</p>` : ''}
                        </div>
                    `;
                }

                // Group by job role
                const jobRoleGroups = groupEmployeesByJobRole(nodeData.employees.filter(e => e !== nodeData.employees[0] || nodeData.type !== 'manager'));

                Array.from(jobRoleGroups.entries()).forEach(([jobRole, employees]) => {
                    employeeCardsHTML += `
                        <div class="job-role-group">
                            <div class="job-role-group-header" onclick="toggleGroup(this)">
                                <h4>${jobRole} (${employees.length})</h4>
                                <div>
                                    <span style="margin-right: 15px;">Location: ${getMostCommonLocation(employees)}</span>
                                    <span class="toggle-icon">▶</span>
                                </div>
                            </div>
                            <div class="job-role-group-content">
                                <ul class="employee-list">
                                    ${employees.map(emp => `
                                        <li class="employee-item">
                                            <div class="employee-info">
                                                <strong>${emp['Employee Name'] || 'N/A'}</strong>
                                                <span>${emp['Employee ID'] || 'N/A'} | ${emp['Location'] || 'N/A'}</span>
                                            </div>
                                            <div class="employee-actions">
                                                <button class="employee-action-btn" onclick="showSingleEmployee(event, ${JSON.stringify(emp).replace(/"/g, '&quot;')})">View</button>
                                            </div>
                                        </li>
                                    `).join('')}
                                </ul>
                            </div>
                        </div>
                    `;
                });

                // Add table view if requested
                if (showTable) {
                    employeeCardsHTML += `
                        <div class="expandable-section" id="employeeTableSection">
                            <div class="expandable-header" onclick="toggleSection('employeeTableSection')">
                                <h4>Table View</h4>
                                <span>▼</span>
                            </div>
                            <div class="expandable-content">
                                <table class="employee-table">
                                    <thead>
                                        <tr>
                                            <th>Name</th>
                                            <th>ID</th>
                                            <th>Job Profile</th>
                                            <th>Location</th>
                                            <th>Reporting Manager</th>
                                            <th>Email</th>
                                            <th>Phone</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        ${nodeData.employees.map(emp => `
                                            <tr>
                                                <td><input type="text" value="${emp['Employee Name'] || ''}" onchange="updateEmployeeData('${emp['Employee ID']}', 'Employee Name', this.value)"></td>
                                                <td>${emp['Employee ID'] || 'N/A'}</td>
                                                <td><input type="text" value="${emp['Job Profile'] || ''}" onchange="updateEmployeeData('${emp['Employee ID']}', 'Job Profile', this.value)"></td>
                                                <td><input type="text" value="${emp['Location'] || ''}" onchange="updateEmployeeData('${emp['Employee ID']}', 'Location', this.value)"></td>
                                                <td>
                                                    <select onchange="updateEmployeeData('${emp['Employee ID']}', 'Reporting Manager', this.value)">
                                                        <option value="">None</option>
                                                        ${employeeData.filter(e => e['Employee ID'] !== emp['Employee ID']).map(e =>
                                                            `<option value="${e['Employee Name']}" ${e['Employee Name'] === emp['Reporting Manager'] ? 'selected' : ''}>
                                                                ${e['Employee Name']} (${e['Job Profile']})
                                                            </option>`
                                                        ).join('')}
                                                    </select>
                                                </td>
                                                <td><input type="text" value="${emp['Email'] || ''}" onchange="updateEmployeeData('${emp['Employee ID']}', 'Email', this.value)"></td>
                                                <td><input type="text" value="${emp['Phone'] || ''}" onchange="updateEmployeeData('${emp['Employee ID']}', 'Phone', this.value)"></td>
                                                <td><button onclick="deleteEmployee('${emp['Employee ID']}')">Delete</button></td>
                                            </tr>
                                        `).join('')}
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    `;
                }
            } else if (nodeData.employees.length === 1) {
                // Single employee view
                const emp = nodeData.employees[0];
                employeeCardsHTML = `
                    <div class="employee-card">
                        <h4>${emp['Employee Name'] || 'N/A'}</h4>
                        <p><strong>Employee ID:</strong> <span class="employee-id">${emp['Employee ID'] || 'N/A'}</span></p>
                        <p><strong>Job Profile:</strong> ${emp['Job Profile'] || 'N/A'}</p>
                        <p><strong>Department:</strong> ${emp['Department'] || 'N/A'}</p>
                        <p><strong>Location:</strong> <span class="employee-location">${emp['Location'] || 'N/A'}</span></p>
                        <p><strong>Reporting Manager:</strong> ${emp['Reporting Manager'] || 'None'}</p>
                        ${emp['Email'] ? `<p><strong>Email:</strong> ${emp['Email']}</p>` : ''}
                        ${emp['Phone'] ? `<p><strong>Phone:</strong> ${emp['Phone']}</p>` : ''}
                    </div>
                `;
            }

            modalContent.innerHTML = controlsHTML + employeeCardsHTML;
            modal.classList.add('active');
        }

        function toggleGroup(header) {
            const group = header.parentElement;
            group.classList.toggle('expanded');
            const icon = group.querySelector('.toggle-icon');
            icon.textContent = group.classList.contains('expanded') ? '▼' : '▶';
        }

        function expandAllGroups() {
            document.querySelectorAll('.job-role-group').forEach(group => {
                group.classList.add('expanded');
                const icon = group.querySelector('.toggle-icon');
                if (icon) icon.textContent = '▼';
            });
        }

        function collapseAllGroups() {
            document.querySelectorAll('.job-role-group').forEach(group => {
                group.classList.remove('expanded');
                const icon = group.querySelector('.toggle-icon');
                if (icon) icon.textContent = '▶';
            });
        }

        function toggleSection(sectionId) {
            const section = document.getElementById(sectionId);
            section.classList.toggle('expanded');
            const icon = section.querySelector('.expandable-header span');
            icon.textContent = section.classList.contains('expanded') ? '▼' : '▶';
        }

        function toggleEmployeeTable() {
            const section = document.getElementById('employeeTableSection');
            if (section) {
                section.classList.toggle('expanded');
                const icon = section.querySelector('.expandable-header span');
                icon.textContent = section.classList.contains('expanded') ? '▼' : '▶';
            }
        }

        function showSingleEmployee(event, emp) {
            event.stopPropagation();
            showEmployeeModal({
                name: emp['Employee Name'],
                type: 'employee',
                count: 1,
                employees: [emp],
                fullName: `${emp['Employee Name']} - ${emp['Job Profile']} (${emp['Employee ID'] || 'N/A'})`
            });
        }

        function closeEmployeeModal() {
            document.getElementById('employeeModal').classList.remove('active');
        }

        function showTooltip(event, data) {
            const tooltip = document.getElementById('tooltip');
            tooltip.style.opacity = '1';
            tooltip.style.left = (event.pageX + 10) + 'px';
            tooltip.style.top = (event.pageY - 10) + 'px';

            let tooltipContent = `<strong>${data.fullName || data.name}</strong><br>`;
            tooltipContent += `Type: ${data.type.replace('-', ' ')}<br>`;

            if (data.count !== undefined) {
                tooltipContent += `Employees: ${data.count}<br>`;
            }

            if (data.employees && data.employees[0]) {
                const emp = data.employees[0];
                if (emp['Employee ID']) tooltipContent += `ID: ${emp['Employee ID']}<br>`;
                if (emp['Job Profile']) tooltipContent += `Job: ${emp['Job Profile']}<br>`;
                if (emp['Location']) tooltipContent += `Location: ${emp['Location']}<br>`;
                if (emp['Reporting Manager']) tooltipContent += `Manager: ${emp['Reporting Manager']}<br>`;
            }

            tooltip.innerHTML = tooltipContent;
        }

        function hideTooltip() {
            document.getElementById('tooltip').style.opacity = '0';
        }

        function showStatus(message, type) {
            const statusDiv = document.getElementById('status');
            statusDiv.innerHTML = message;
            statusDiv.className = `status ${type}`;
        }

        function saveChartAsImage() {
            // Get the SVG element
            const svgElement = document.querySelector('#flowchartContainer svg');
            
            // Create a canvas to render the SVG
            const canvas = document.createElement('canvas');
            const svgRect = svgElement.getBoundingClientRect();
            canvas.width = svgRect.width;
            canvas.height = svgRect.height;
            
            // Get the SVG data
            const svgData = new XMLSerializer().serializeToString(svgElement);
            const img = new Image();
            
            img.onload = function() {
                const ctx = canvas.getContext('2d');
                ctx.drawImage(img, 0, 0);
                
                // Create download link
                const link = document.createElement('a');
                link.download = `${currentDepartment.replace(/[^a-z0-9]/gi, '_')}_hierarchy.png`;
                link.href = canvas.toDataURL('image/png');
                link.click();
            };
            
            img.src = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svgData)));
        }

        // Edit mode functions
        function showEditForm(event, nodeId) {
            event.stopPropagation();

            // Find the node data
            const nodeData = hierarchyData.nodes.find(n => n.id === nodeId);
            if (!nodeData) return;

            // Hide any existing edit forms
            hideEditForm();

            // Create and show the edit form
            const editForm = document.createElement('div');
            editForm.className = 'edit-form';
            editForm.innerHTML = `
                <h4>Edit Node</h4>
                <input type="text" id="editNodeName" value="${nodeData.name}" placeholder="Node name">
                ${nodeData.type === 'employee' ? `
                    <input type="text" id="editNodeJob" value="${nodeData.employees[0]['Job Profile'] || ''}" placeholder="Job Profile">
                    <input type="text" id="editNodeLocation" value="${nodeData.employees[0]['Location'] || ''}" placeholder="Location">
                    <select id="editNodeManager">
                        <option value="">No Manager</option>
                        ${employeeData.filter(e => e['Employee ID'] !== nodeData.employees[0]['Employee ID']).map(e =>
                            `<option value="${e['Employee Name']}" ${e['Employee Name'] === nodeData.employees[0]['Reporting Manager'] ? 'selected' : ''}>
                                ${e['Employee Name']} (${e['Job Profile']})
                            </option>`
                        ).join('')}
                    </select>
                ` : ''}
                <div class="edit-form-buttons">
                    <button class="edit-form-save" onclick="saveNodeEdit(${nodeId})">Save</button>
                    <button class="edit-form-cancel" onclick="hideEditForm()">Cancel</button>
                </div>
            `;

            // Position the form near the node
            const svgRect = document.getElementById('flowchartContainer').getBoundingClientRect();
            const nodeElement = document.querySelector(`.node[data-id="${nodeId}"]`);
            if (nodeElement) {
                const nodeRect = nodeElement.getBoundingClientRect();
                editForm.style.position = 'absolute';
                editForm.style.left = `${nodeRect.left - svgRect.left + nodeRect.width}px`;
                editForm.style.top = `${nodeRect.top - svgRect.top}px`;

                document.getElementById('flowchartContainer').appendChild(editForm);
                currentlyEditingNode = nodeId;
            }
        }

        function hideEditForm() {
            const existingForm = document.querySelector('.edit-form');
            if (existingForm) {
                existingForm.remove();
            }
            currentlyEditingNode = null;
        }

        function saveNodeEdit(nodeId) {
            const nodeData = hierarchyData.nodes.find(n => n.id === nodeId);
            if (!nodeData) return;

            const newName = document.getElementById('editNodeName').value;
            nodeData.name = newName;

            if (nodeData.type === 'employee') {
                const employee = nodeData.employees[0];
                employee['Job Profile'] = document.getElementById('editNodeJob').value;
                employee['Location'] = document.getElementById('editNodeLocation').value;
                employee['Reporting Manager'] = document.getElementById('editNodeManager').value;

                // Update the employee in the main data array
                const empIndex = employeeData.findIndex(e => e['Employee ID'] === employee['Employee ID']);
                if (empIndex !== -1) {
                    employeeData[empIndex] = employee;
                }
            }

            // Update the node's full name for display
            if (nodeData.type === 'employee') {
                nodeData.fullName = `${nodeData.employees[0]['Employee Name']} - ${nodeData.employees[0]['Job Profile']} (${nodeData.employees[0]['Employee ID'] || 'N/A'})`;
            } else {
                nodeData.fullName = `${newName} (${nodeData.count || 0} employees)`;
            }

            hideEditForm();
            pushToHistory();
            renderCombinedFlowChart(hierarchyData);
        }

        function deleteNode(event, nodeId) {
            event.stopPropagation();

            if (!confirm('Are you sure you want to delete this node?')) return;

            // Find the node data
            const nodeIndex = hierarchyData.nodes.findIndex(n => n.id === nodeId);
            if (nodeIndex === -1) return;

            const nodeData = hierarchyData.nodes[nodeIndex];

            // If it's an employee node, remove the employee from the data
            if (nodeData.type === 'employee') {
                const employeeId = nodeData.employees[0]['Employee ID'];
                const empIndex = employeeData.findIndex(e => e['Employee ID'] === employeeId);
                if (empIndex !== -1) {
                    employeeData.splice(empIndex, 1);
                }
            }

            // Remove the node and its links
            hierarchyData.nodes.splice(nodeIndex, 1);
            hierarchyData.links = hierarchyData.links.filter(link =>
                link.source !== nodeId && link.target !== nodeId
            );

            // If it was a manager node, we need to handle its employees
            if (nodeData.type === 'manager') {
                // Find all job roles and employees under this manager
                const children = hierarchyData.nodes.filter(n =>
                    (n.type === 'job-role' || n.type === 'employee') && n.managerId === nodeId
                );

                // Remove them from the hierarchy
                children.forEach(child => {
                    const childIndex = hierarchyData.nodes.findIndex(n => n.id === child.id);
                    if (childIndex !== -1) {
                        hierarchyData.nodes.splice(childIndex, 1);
                    }
                });

                // Remove all links to/from these nodes
                hierarchyData.links = hierarchyData.links.filter(link =>
                    !children.some(child => child.id === link.source || child.id === link.target)
                );
            }

            pushToHistory();
            renderCombinedFlowChart(hierarchyData);
        }

        function startResize(event, nodeId) {
            event.stopPropagation();
            resizeActive = true;
            currentlyEditingNode = nodeId;

            // Find the node element and its rectangle
            const nodeElement = document.querySelector(`.node[data-id="${nodeId}"]`);
            if (nodeElement) {
                const rect = nodeElement.querySelector('rect');
                originalSize = {
                    width: parseFloat(rect.getAttribute('width')),
                    height: parseFloat(rect.getAttribute('height'))
                };
                originalPosition = {
                    x: parseFloat(nodeElement.getAttribute('transform').split(',')[0].replace('translate(', '')),
                    y: parseFloat(nodeElement.getAttribute('transform').split(',')[1].replace(')', ''))
                };
            }

            // Add event listeners for the resize operation
            document.addEventListener('mousemove', handleResize);
            document.addEventListener('mouseup', stopResize);
        }

        function handleResize(event) {
            if (!resizeActive) return;

            const nodeElement = document.querySelector(`.node[data-id="${currentlyEditingNode}"]`);
            if (!nodeElement) return;

            // Get mouse position relative to the SVG
            const svg = document.querySelector('#flowchartContainer svg');
            const pt = svg.createSVGPoint();
            pt.x = event.clientX;
            pt.y = event.clientY;
            const svgPoint = pt.matrixTransform(svg.getScreenCTM().inverse());

            // Calculate new size
            const newWidth = Math.max(50, svgPoint.x - originalPosition.x + originalSize.width/2);
            const newHeight = Math.max(30, svgPoint.y - originalPosition.y + originalSize.height/2);

            // Update the node's rectangle
            const rect = nodeElement.querySelector('rect');
            rect.setAttribute('width', newWidth);
            rect.setAttribute('height', newHeight);
            rect.setAttribute('x', -newWidth/2);
            rect.setAttribute('y', -newHeight/2);

            // Update the foreignObject (edit controls)
            const foreignObject = nodeElement.querySelector('foreignObject');
            if (foreignObject) {
                foreignObject.setAttribute('width', newWidth);
                foreignObject.setAttribute('height', newHeight);
                foreignObject.setAttribute('x', -newWidth/2);
                foreignObject.setAttribute('y', -newHeight/2);
            }

            // Update the text position
            const text = nodeElement.querySelector('text');
            if (text) {
                text.setAttribute('dy', '0.35em');
            }
        }

        function stopResize() {
            if (!resizeActive) return;

            resizeActive = false;
            currentlyEditingNode = null;
            originalSize = null;
            originalPosition = null;

            // Remove event listeners
            document.removeEventListener('mousemove', handleResize);
            document.removeEventListener('mouseup', stopResize);

            pushToHistory();
        }

        function updateEmployeeData(employeeId, field, value) {
            const empIndex = employeeData.findIndex(e => e['Employee ID'] === employeeId);
            if (empIndex !== -1) {
                employeeData[empIndex][field] = value;

                // Update the hierarchy data if needed
                if (hierarchyData) {
                    const nodeIndex = hierarchyData.nodes.findIndex(n =>
                        n.type === 'employee' && n.employees[0]['Employee ID'] === employeeId
                    );

                    if (nodeIndex !== -1) {
                        hierarchyData.nodes[nodeIndex].employees[0][field] = value;

                        // Update the node's full name if name or job profile changed
                        if (field === 'Employee Name' || field === 'Job Profile') {
                            const emp = hierarchyData.nodes[nodeIndex].employees[0];
                            hierarchyData.nodes[nodeIndex].fullName =
                                `${emp['Employee Name']} - ${emp['Job Profile']} (${emp['Employee ID'] || 'N/A'})`;
                        }
                    }
                }

                pushToHistory();
                renderCombinedFlowChart(hierarchyData);
            }
        }

        function deleteEmployee(employeeId) {
            if (!confirm('Are you sure you want to delete this employee?')) return;

            const empIndex = employeeData.findIndex(e => e['Employee ID'] === employeeId);
            if (empIndex !== -1) {
                employeeData.splice(empIndex, 1);

                // Update the hierarchy data
                if (hierarchyData) {
                    const nodeIndex = hierarchyData.nodes.findIndex(n =>
                        n.type === 'employee' && n.employees[0]['Employee ID'] === employeeId
                    );

                    if (nodeIndex !== -1) {
                        // Remove the node and its links
                        hierarchyData.nodes.splice(nodeIndex, 1);
                        hierarchyData.links = hierarchyData.links.filter(link =>
                            link.source !== hierarchyData.nodes[nodeIndex].id &&
                            link.target !== hierarchyData.nodes[nodeIndex].id
                        );
                    }
                }

                pushToHistory();
                renderCombinedFlowChart(hierarchyData);
                closeEmployeeModal();
            }
        }

        // Make functions available globally for HTML onclick handlers
        window.toggleGroup = toggleGroup;
        window.expandAllGroups = expandAllGroups;
        window.collapseAllGroups = collapseAllGroups;
        window.showSingleEmployee = showSingleEmployee;
        window.closeEmployeeModal = closeEmployeeModal;
        window.showAllEmployees = showAllEmployees;
        window.showAllManagers = showAllManagers;
        window.toggleSection = toggleSection;
        window.toggleEmployeeTable = toggleEmployeeTable;
        window.updateEmployeeData = updateEmployeeData;
        window.deleteEmployee = deleteEmployee;
        window.showEditForm = showEditForm;
        window.hideEditForm = hideEditForm;
        window.saveNodeEdit = saveNodeEdit;
        window.deleteNode = deleteNode;
        window.startResize = startResize;
    </script>
</body>
</html>
