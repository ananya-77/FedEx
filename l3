<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Employee Hierarchy Analyzer</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/7.8.5/d3.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script src="https://html2canvas.hertzen.com/dist/html2canvas.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Arial, sans-serif;
            background: #f5f5f5;
            min-height: 100vh;
            padding: 20px;
            color: #333;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            border: 1px solid #e0e0e0;
        }

        .header {
            background: linear-gradient(135deg, #4D148C, #660099);
            color: white;
            padding: 30px;
            text-align: center;
            border-bottom: 4px solid #FF6600;
        }

        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            font-weight: 700;
        }

        .header p {
            opacity: 0.9;
            font-size: 1.1rem;
        }

        .upload-section {
            padding: 30px;
            border-bottom: 1px solid #e0e0e0;
        }

        .file-upload {
            position: relative;
            display: inline-block;
            width: 100%;
            margin-bottom: 20px;
        }

        .file-input {
            width: 100%;
            padding: 15px;
            border: 2px dashed #4D148C;
            border-radius: 8px;
            background: #f9f6fc;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
            font-size: 1.1rem;
            color: #4D148C;
        }

        .file-input:hover {
            border-color: #660099;
            background: #f0e6f7;
        }

        #fileInput {
            position: absolute;
            opacity: 0;
            width: 100%;
            height: 100%;
            cursor: pointer;
        }

        .department-select {
            margin-top: 20px;
        }

        .manager-select {
            margin-top: 15px;
            display: none;
        }

        select {
            width: 100%;
            padding: 12px;
            border: 2px solid #ddd;
            border-radius: 8px;
            font-size: 1rem;
            background: white;
            cursor: pointer;
            color: #333;
        }

        .results-section {
            padding: 30px;
        }

        .summary-stats {
            display: flex;
            gap: 20px;
            margin-bottom: 30px;
            flex-wrap: wrap;
        }

        .stat-card {
            background: linear-gradient(135deg, #4D148C, #660099);
            color: white;
            padding: 20px;
            border-radius: 8px;
            flex: 1;
            min-width: 150px;
            text-align: center;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            cursor: pointer;
            transition: transform 0.2s ease;
        }

        .stat-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
        }

        .stat-number {
            font-size: 2rem;
            font-weight: bold;
            display: block;
        }

        .stat-label {
            font-size: 0.9rem;
            opacity: 0.9;
        }

        .view-options {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }

        .view-options button {
            padding: 8px 15px;
            border: none;
            border-radius: 5px;
            background: #e0e0e0;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s;
        }

        .view-options button.active {
            background: #4D148C;
            color: white;
        }

        .flowchart-section {
            margin-top: 40px;
            padding: 0;
            background: white;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            display: none;
            height: 800px;
            position: relative;
        }

        .flowchart-header {
            background: linear-gradient(135deg, #4D148C, #660099);
            color: white;
            padding: 20px;
            border-radius: 8px 8px 0 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            position: sticky;
            top: 0;
            z-index: 10;
            border-bottom: 3px solid #FF6600;
        }

        .flowchart-header h2 {
            margin: 0;
            font-size: 1.8rem;
            font-weight: 600;
        }

        .flowchart-options {
            display: flex;
            gap: 10px;
            margin-top: 10px;
            flex-wrap: wrap;
            align-items: center;
        }

        .flowchart-options button {
            padding: 8px 15px;
            border: none;
            border-radius: 5px;
            background: rgba(255, 255, 255, 0.2);
            color: white;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s;
        }

        .flowchart-options button:hover {
            background: rgba(255, 255, 255, 0.3);
        }

        .flowchart-options button.active {
            background: white;
            color: #660099;
        }

        .flowchart-options button.edit-mode {
            background: #FF6600;
            color: white;
        }

        .chart-container {
            width: 100%;
            height: calc(100% - 70px);
            background: white;
            overflow: auto;
            touch-action: none;
        }

        #flowchartContainer {
            width: 100%;
            min-height: 100%;
            position: relative;
        }

        #flowchartContainer svg {
            width: 100%;
            height: 100%;
            display: block;
        }

        .node rect {
            stroke-width: 1.5px;
            rx: 3;
            ry: 3;
            cursor: pointer;
            transition: all 0.2s ease;
            fill: none;
        }

        .node text {
            font-family: 'Segoe UI', Arial, sans-serif;
            text-anchor: middle;
            pointer-events: none;
            font-weight: bold;
        }

        .department-node text {
            fill: #4D148C;
        }

        .manager-node text {
            fill: #660099;
        }

        .job-role-node text {
            fill: #0071CE;
        }

        .employee-node text {
            fill: #0099D8;
        }

        .top-level-node text {
            fill: #0099D8;
        }

        .link {
            fill: none;
            stroke: #666;
            stroke-width: 1.5px;
            stroke-linecap: round;
        }

        #tooltip {
            position: absolute;
            padding: 10px;
            background: rgba(0, 0, 0, 0.8);
            color: white;
            border-radius: 5px;
            pointer-events: none;
            font-size: 12px;
            opacity: 0;
            transition: opacity 0.3s;
            z-index: 10;
            max-width: 250px;
        }

        #employeeModal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 100;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.3s ease;
        }

        #employeeModal.active {
            opacity: 1;
            pointer-events: all;
        }

        .modal-content {
            background: white;
            border-radius: 10px;
            width: 90%;
            max-width: 800px;
            max-height: 80vh;
            overflow-y: auto;
            padding: 20px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px solid #eee;
        }

        .modal-header h3 {
            margin: 0;
            color: #4D148C;
            font-size: 1.5rem;
        }

        .close-modal {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: #7f8c8d;
        }

        .employee-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 15px;
        }

        .employee-card {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 15px;
            border: 1px solid #e0e0e0;
            transition: transform 0.2s, box-shadow 0.2s;
        }

        .employee-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .employee-card h4 {
            margin-top: 0;
            color: #4D148C;
            border-bottom: 1px solid #ddd;
            padding-bottom: 5px;
            font-size: 1.1rem;
        }

        .employee-card p {
            margin: 5px 0;
            font-size: 0.9rem;
        }

        .employee-card .employee-id {
            font-weight: bold;
            color: #660099;
        }

        .employee-card .employee-location {
            color: #666;
            font-size: 0.85rem;
        }

        .highlight {
            animation: pulse 0.5s ease-in-out;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }

        .fullscreen-chart {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 1000;
            background: white;
            padding: 0;
            margin: 0;
            border-radius: 0;
        }

        .fullscreen-chart .chart-container {
            height: calc(100% - 70px);
        }

        .fullscreen-chart .flowchart-header {
            border-radius: 0;
        }

        .no-data {
            text-align: center;
            padding: 40px;
            color: #7f8c8d;
            font-size: 1.1rem;
        }

        .status {
            margin-top: 15px;
            padding: 10px;
            border-radius: 5px;
            text-align: center;
        }

        .status.success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .status.error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .screenshot-btn {
            background: linear-gradient(135deg, #FF6600, #FF9900);
            color: white;
        }

        .screenshot-btn:hover {
            background: linear-gradient(135deg, #E55C00, #E58800);
        }

        .job-role-group {
            margin-bottom: 15px;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            overflow: hidden;
        }

        .job-role-group-header {
            background: #e8f0fe;
            padding: 10px 15px;
            cursor: pointer;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .job-role-group-header h4 {
            margin: 0;
            color: #1967d2;
        }

        .job-role-group-content {
            display: none;
            padding: 0;
        }

        .job-role-group.expanded .job-role-group-content {
            display: block;
        }

        .employee-list {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .employee-item {
            padding: 10px 15px;
            border-bottom: 1px solid #eee;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .employee-item:last-child {
            border-bottom: none;
        }

        .employee-info {
            flex: 1;
        }

        .employee-info strong {
            display: block;
            margin-bottom: 3px;
        }

        .employee-info span {
            font-size: 0.85rem;
            color: #666;
        }

        .employee-actions {
            display: flex;
            gap: 5px;
        }

        .employee-action-btn {
            padding: 5px 10px;
            background: #4D148C;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.8rem;
            transition: background 0.2s;
        }

        .employee-action-btn:hover {
            background: #660099;
        }

        /* Hierarchy View Styles */
        .hierarchy-view {
            margin-top: 20px;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 8px;
            border: 1px solid #e0e0e0;
            max-height: 500px;
            overflow-y: auto;
        }
        
        .hierarchy-node {
            padding: 10px;
            margin: 5px 0;
            background: white;
            border-radius: 5px;
            border-left: 4px solid #4D148C;
            cursor: pointer;
            transition: all 0.2s;
        }
        
        .hierarchy-node:hover {
            background: #f0e6f7;
        }
        
        .hierarchy-node.manager {
            border-left-color: #660099;
        }
        
        .hierarchy-node.job-role {
            border-left-color: #0071CE;
        }
        
        .hierarchy-node.employee {
            border-left-color: #0099D8;
        }
        
        .hierarchy-children {
            margin-left: 20px;
            padding-left: 15px;
            border-left: 2px dashed #ddd;
        }
        
        .hierarchy-node-title {
            font-weight: 600;
            display: flex;
            justify-content: space-between;
        }
        
        .hierarchy-node-count {
            font-size: 0.85rem;
            color: #666;
        }

        /* Location filter styles */
        .location-filter {
            margin-top: 15px;
            padding: 10px;
            background: #f8f9fa;
            border-radius: 8px;
            border: 1px solid #e0e0e0;
        }

        .location-filter label {
            font-weight: 600;
            margin-right: 10px;
            color: #4D148C;
        }

        .location-filter select {
            width: auto;
            min-width: 200px;
        }

        /* Node size controls */
        .node-size-controls {
            display: flex;
            gap: 10px;
            align-items: center;
            margin-top: 10px;
            background: rgba(255, 255, 255, 0.1);
            padding: 8px;
            border-radius: 5px;
        }

        .node-size-controls label {
            font-size: 0.85rem;
            color: white;
            margin-right: 5px;
        }

        .node-size-controls select {
            padding: 5px;
            border-radius: 4px;
            border: none;
            background: white;
            color: #333;
            font-size: 0.85rem;
            width: auto;
        }

        .node-size-controls button {
            padding: 5px 10px;
            font-size: 0.85rem;
        }

        @media (max-width: 768px) {
            .flowchart-header {
                flex-direction: column;
                align-items: flex-start;
            }

            .flowchart-options {
                margin-top: 15px;
                justify-content: flex-start;
            }

            .stat-card {
                min-width: 100%;
            }

            .employee-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Employee Hierarchy Analyzer</h1>
            <p>Upload Excel or JSON data to visualize your organizational structure</p>
        </div>

        <div class="upload-section">
            <div class="file-upload">
                <div class="file-input">
                    <input type="file" id="fileInput" accept=".json,.xlsx,.xls,.csv" />
                    📁 Click to upload Excel or JSON file
                </div>
            </div>

            <div class="department-select" style="display: none;" id="departmentSelectDiv">
                <label for="departmentSelect"><strong>Select Department:</strong></label>
                <select id="departmentSelect">
                    <option value="">Choose a department...</option>
                </select>
            </div>

            <div class="manager-select" style="display: none;" id="managerSelectDiv">
                <label for="managerSelect"><strong>Select Manager:</strong></label>
                <select id="managerSelect">
                    <option value="">Show full department hierarchy</option>
                </select>
            </div>

            <div id="status"></div>
        </div>

        <div class="results-section" id="resultsSection" style="display: none;">
            <div class="summary-stats" id="summaryStats"></div>

            <div class="view-options">
                <button id="chartViewBtn" class="active">Chart View</button>
                <button id="hierarchyViewBtn">Hierarchy View</button>
            </div>

            <div id="hierarchyView" style="display: none;">
                <div class="hierarchy-view" id="hierarchyTree"></div>
            </div>

            <div class="flowchart-section" id="flowchartSection">
                <div class="flowchart-header">
                    <h2>📊 Organizational Hierarchy Chart</h2>
                    <div class="flowchart-options">
                        <button id="fullscreenBtn">Fullscreen</button>
                        <button id="saveChartBtn" class="screenshot-btn">Save Screenshot</button>
                        <div class="node-size-controls">
                            <label for="nodeSizeSelect">Node Size:</label>
                            <select id="nodeSizeSelect">
                                <option value="small">Small</option>
                                <option value="medium" selected>Medium</option>
                                <option value="large">Large</option>
                                <option value="xlarge">Extra Large</option>
                            </select>
                            <label for="spacingSelect">Spacing:</label>
                            <select id="spacingSelect">
                                <option value="compact">Compact</option>
                                <option value="normal" selected>Normal</option>
                                <option value="wide">Wide</option>
                                <option value="xwide">Extra Wide</option>
                            </select>
                            <button id="applySizeBtn">Apply</button>
                        </div>
                    </div>
                </div>

                <div class="location-filter" id="locationFilter" style="display: none;">
                    <label for="locationSelect">Filter by Location:</label>
                    <select id="locationSelect">
                        <option value="">All Locations</option>
                    </select>
                </div>

                <div class="chart-container" id="flowchartContainer"></div>
            </div>
        </div>
    </div>

    <!-- Tooltip -->
    <div id="tooltip"></div>

    <!-- Employee Modal -->
    <div id="employeeModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 id="modalTitle">Employee Details</h3>
                <button class="close-modal" onclick="closeEmployeeModal()">×</button>
            </div>
            <div id="modalContent"></div>
        </div>
    </div>

    <script>
        let employeeData = [];
        let currentDepartment = '';
        let currentManager = '';
        let currentLocation = '';
        let currentLayout = 'vertical';
        let hierarchyData = null;
        let lastClickTime = 0;
        const doubleClickThreshold = 300; // milliseconds for double-tap detection
        let customLayoutSettings = {
            horizontalSpacing: 150,
            verticalSpacing: 80,
            elbowLength: 50,
            nodeSize: 'medium',
            spacing: 'normal'
        };

        // Node size presets
        const nodeSizePresets = {
            small: {
                department: { width: 150, height: 40, fontSize: 12 },
                manager: { width: 120, height: 35, fontSize: 10 },
                'job-role': { width: 100, height: 30, fontSize: 9 },
                'top-level-role': { width: 100, height: 30, fontSize: 9 },
                'employee': { width: 90, height: 25, fontSize: 8 },
                'location': { width: 110, height: 30, fontSize: 9 }
            },
            medium: {
                department: { width: 180, height: 50, fontSize: 14 },
                manager: { width: 150, height: 45, fontSize: 12 },
                'job-role': { width: 130, height: 40, fontSize: 11 },
                'top-level-role': { width: 130, height: 40, fontSize: 11 },
                'employee': { width: 120, height: 35, fontSize: 10 },
                'location': { width: 140, height: 40, fontSize: 11 }
            },
            large: {
                department: { width: 220, height: 60, fontSize: 16 },
                manager: { width: 180, height: 55, fontSize: 14 },
                'job-role': { width: 160, height: 50, fontSize: 13 },
                'top-level-role': { width: 160, height: 50, fontSize: 13 },
                'employee': { width: 150, height: 45, fontSize: 12 },
                'location': { width: 170, height: 50, fontSize: 13 }
            },
            xlarge: {
                department: { width: 260, height: 70, fontSize: 18 },
                manager: { width: 220, height: 65, fontSize: 16 },
                'job-role': { width: 190, height: 60, fontSize: 15 },
                'top-level-role': { width: 190, height: 60, fontSize: 15 },
                'employee': { width: 180, height: 55, fontSize: 14 },
                'location': { width: 200, height: 60, fontSize: 15 }
            }
        };

        // Spacing presets
        const spacingPresets = {
            compact: {
                horizontalSpacing: 100,
                verticalSpacing: 60,
                elbowLength: 30
            },
            normal: {
                horizontalSpacing: 150,
                verticalSpacing: 80,
                elbowLength: 50
            },
            wide: {
                horizontalSpacing: 200,
                verticalSpacing: 100,
                elbowLength: 70
            },
            xwide: {
                horizontalSpacing: 250,
                verticalSpacing: 120,
                elbowLength: 90
            }
        };

        // Initialize event listeners
        document.getElementById('fileInput').addEventListener('change', handleFileUpload);
        document.getElementById('departmentSelect').addEventListener('change', handleDepartmentChange);
        document.getElementById('managerSelect').addEventListener('change', handleManagerChange);
        document.getElementById('locationSelect').addEventListener('change', handleLocationChange);
        document.getElementById('fullscreenBtn').addEventListener('click', toggleFullscreen);
        document.getElementById('saveChartBtn').addEventListener('click', saveChartAsImage);
        document.getElementById('chartViewBtn').addEventListener('click', () => toggleView('chart'));
        document.getElementById('hierarchyViewBtn').addEventListener('click', () => toggleView('hierarchy'));
        document.getElementById('applySizeBtn').addEventListener('click', applyNodeSizeAndSpacing);

        function toggleView(viewType) {
            if (viewType === 'chart') {
                document.getElementById('flowchartSection').style.display = 'block';
                document.getElementById('hierarchyView').style.display = 'none';
                document.getElementById('chartViewBtn').classList.add('active');
                document.getElementById('hierarchyViewBtn').classList.remove('active');
            } else {
                document.getElementById('flowchartSection').style.display = 'none';
                document.getElementById('hierarchyView').style.display = 'block';
                document.getElementById('chartViewBtn').classList.remove('active');
                document.getElementById('hierarchyViewBtn').classList.add('active');
                renderHierarchyView();
            }
        }

        function applyNodeSizeAndSpacing() {
            const nodeSize = document.getElementById('nodeSizeSelect').value;
            const spacing = document.getElementById('spacingSelect').value;

            customLayoutSettings.nodeSize = nodeSize;
            customLayoutSettings.spacing = spacing;

            // Update spacing
            Object.assign(customLayoutSettings, spacingPresets[spacing]);

            // Re-render the chart if we have data
            if (hierarchyData) {
                renderCombinedFlowChart(hierarchyData);
            }
        }

        // Enhanced name normalization with fuzzy matching
        function normalizeName(name) {
            if (!name) return '';

            // Convert to lowercase and remove extra spaces
            let normalized = name.toString().trim().toLowerCase()
                .replace(/\s+/g, ' ') // Replace multiple spaces with single space
                .replace(/[^a-z\s]/g, ''); // Remove special characters

            // Split into parts and sort alphabetically to handle name order variations
            const parts = normalized.split(' ').sort();
            return parts.join(' ');
        }

        // Calculate similarity between two names (0 to 1)
        function nameSimilarity(name1, name2) {
            const normalized1 = normalizeName(name1);
            const normalized2 = normalizeName(name2);

            if (normalized1 === normalized2) return 1.0;

            // Split into parts
            const parts1 = normalized1.split(' ');
            const parts2 = normalized2.split(' ');

            // Count matching parts
            let matches = 0;
            for (const part1 of parts1) {
                for (const part2 of parts2) {
                    if (part1 === part2) {
                        matches++;
                        break;
                    }
                }
            }

            // Calculate similarity score
            const maxLength = Math.max(parts1.length, parts2.length);
            return matches / maxLength;
        }

        // Find best matching employee for a manager name
        function findBestMatch(managerName, employees) {
            let bestMatch = null;
            let bestScore = 0.7; // Minimum similarity threshold

            for (const emp of employees) {
                const score = nameSimilarity(managerName, emp['Employee Name']);
                if (score > bestScore) {
                    bestScore = score;
                    bestMatch = emp;
                }
            }

            return bestMatch;
        }

        function handleFileUpload(event) {
            const file = event.target.files[0];
            if (!file) return;

            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    if (file.name.endsWith('.xlsx') || file.name.endsWith('.xls') || file.name.endsWith('.csv')) {
                        // Process Excel file
                        const data = new Uint8Array(e.target.result);
                        const workbook = XLSX.read(data, { type: 'array' });
                        const firstSheetName = workbook.SheetNames[0];
                        const worksheet = workbook.Sheets[firstSheetName];
                        const jsonData = XLSX.utils.sheet_to_json(worksheet);

                        // Standardize column names (case-insensitive and flexible matching)
                        const standardizedData = jsonData.map(row => {
                            const standardizedRow = {};
                            for (const key in row) {
                                const lowerKey = key.toLowerCase().trim();

                                if (lowerKey.includes('department') || lowerKey === 'dept') {
                                    standardizedRow['Department'] = row[key];
                                } else if ((lowerKey.includes('employee') && lowerKey.includes('name')) ||
                                          lowerKey === 'name' ||
                                          lowerKey === 'full name') {
                                    standardizedRow['Employee Name'] = row[key];
                                } else if ((lowerKey.includes('job') && lowerKey.includes('profile')) ||
                                          lowerKey.includes('title') ||
                                          lowerKey.includes('position')) {
                                    standardizedRow['Job Profile'] = row[key];
                                } else if (lowerKey.includes('location') || lowerKey === 'office') {
                                    standardizedRow['Location'] = row[key];
                                } else if ((lowerKey.includes('reporting') && lowerKey.includes('manager')) ||
                                          lowerKey.includes('manager') ||
                                          lowerKey.includes('supervisor')) {
                                    standardizedRow['Reporting Manager'] = row[key];
                                } else if ((lowerKey.includes('employee') && lowerKey.includes('id')) ||
                                          lowerKey.includes('staff id') ||
                                          lowerKey.includes('emp id')) {
                                    standardizedRow['Employee ID'] = row[key];
                                } else if (lowerKey.includes('email') || lowerKey.includes('mail')) {
                                    standardizedRow['Email'] = row[key];
                                } else if (lowerKey.includes('phone') || lowerKey.includes('mobile') || lowerKey.includes('contact')) {
                                    standardizedRow['Phone'] = row[key];
                                }
                            }
                            return standardizedRow;
                        });

                        employeeData = standardizedData;
                        showStatus('Excel file uploaded successfully! ' + employeeData.length + ' records loaded.', 'success');
                        populateDepartmentSelect();
                    } else {
                        // Process JSON file
                        const jsonData = JSON.parse(e.target.result);
                        employeeData = Array.isArray(jsonData) ? jsonData : [jsonData];

                        // Ensure JSON data has required fields
                        employeeData = employeeData.map(emp => {
                            return {
                                'Department': emp.Department || emp.department || emp.Dept || emp.dept || 'Unknown',
                                'Employee Name': emp['Employee Name'] || emp.employeeName || emp.name || emp.fullName || 'Unknown',
                                'Job Profile': emp['Job Profile'] || emp.jobProfile || emp.title || emp.position || 'Unknown',
                                'Location': emp.Location || emp.location || emp.office || 'Unknown',
                                'Reporting Manager': emp['Reporting Manager'] || emp.reportingManager || emp.manager || emp.supervisor || '',
                                'Employee ID': emp['Employee ID'] || emp.employeeID || emp.staffID || emp.id || '',
                                'Email': emp.Email || emp.email || emp.mail || '',
                                'Phone': emp.Phone || emp.phone || emp.mobile || emp.contact || ''
                            };
                        });

                        showStatus('JSON file uploaded successfully! ' + employeeData.length + ' records loaded.', 'success');
                        populateDepartmentSelect();
                    }
                } catch (error) {
                    showStatus('Error parsing file. Please check the format.', 'error');
                    console.error(error);
                }
            };
            reader.onerror = function() {
                showStatus('Error reading file.', 'error');
            };

            if (file.name.endsWith('.xlsx') || file.name.endsWith('.xls') || file.name.endsWith('.csv')) {
                reader.readAsArrayBuffer(file);
            } else {
                reader.readAsText(file);
            }
        }

        function populateDepartmentSelect() {
            const departments = [...new Set(employeeData.map(emp => emp.Department))].filter(Boolean);
            const select = document.getElementById('departmentSelect');

            select.innerHTML = '<option value="">Choose a department...</option>';
            departments.forEach(dept => {
                const option = document.createElement('option');
                option.value = dept;
                option.textContent = dept;
                select.appendChild(option);
            });

            document.getElementById('departmentSelectDiv').style.display = 'block';
        }

        function populateManagerSelect(department) {
            const deptEmployees = employeeData.filter(emp => emp.Department === department);
            const managerStructure = buildManagerStructure(deptEmployees);

            const select = document.getElementById('managerSelect');
            select.innerHTML = '<option value="">Show full department hierarchy</option>';

            // Add all managers who have employees reporting to them
            managerStructure.forEach((data, managerName) => {
                const option = document.createElement('option');
                option.value = data.manager['Employee Name'];
                option.textContent = `${data.manager['Employee Name']} (${data.employees.length} employees)`;
                select.appendChild(option);
            });

            document.getElementById('managerSelectDiv').style.display = 'block';
        }

        function populateLocationSelect(department) {
            const deptEmployees = employeeData.filter(emp => emp.Department === department);
            const locations = [...new Set(deptEmployees.map(emp => emp['Location']))].filter(Boolean);
            const select = document.getElementById('locationSelect');

            select.innerHTML = '<option value="">All Locations</option>';
            locations.forEach(location => {
                const option = document.createElement('option');
                option.value = location;
                option.textContent = location;
                select.appendChild(option);
            });

            document.getElementById('locationFilter').style.display = 'block';
        }

        function handleDepartmentChange(event) {
            currentDepartment = event.target.value;
            if (currentDepartment) {
                populateManagerSelect(currentDepartment);
                populateLocationSelect(currentDepartment);
                generateHierarchyTables();
            } else {
                document.getElementById('managerSelectDiv').style.display = 'none';
                document.getElementById('locationFilter').style.display = 'none';
                document.getElementById('resultsSection').style.display = 'none';
            }
        }

        function handleManagerChange(event) {
            currentManager = event.target.value;
            if (currentDepartment) {
                generateHierarchyTables();
            }
        }

        function handleLocationChange(event) {
            currentLocation = event.target.value;
            if (currentDepartment) {
                generateHierarchyTables();
            }
        }

        function toggleFullscreen() {
            const flowchartSection = document.getElementById('flowchartSection');
            const isFullscreen = flowchartSection.classList.contains('fullscreen-chart');

            if (isFullscreen) {
                flowchartSection.classList.remove('fullscreen-chart');
                document.body.style.overflow = 'auto';
            } else {
                flowchartSection.classList.add('fullscreen-chart');
                document.body.style.overflow = 'hidden';
            }

            // Recalculate dimensions after fullscreen change
            setTimeout(() => {
                if (hierarchyData) {
                    renderCombinedFlowChart(hierarchyData);
                }
            }, 100);
        }

        function generateHierarchyTables() {
            const deptEmployees = employeeData.filter(emp => emp.Department === currentDepartment);

            // Apply location filter if selected
            const filteredEmployees = currentLocation ?
                deptEmployees.filter(emp => emp['Location'] === currentLocation) :
                deptEmployees;

            if (filteredEmployees.length === 0) {
                showStatus('No employees found matching the selected criteria.', 'error');
                return;
            }

            // Build manager-employee structure with enhanced name matching
            const managerStructure = buildManagerStructure(filteredEmployees);

            // Generate summary stats
            generateSummaryStats(filteredEmployees, managerStructure);

            // Generate combined flow chart first
            if (currentManager) {
                // Find the selected manager in the structure
                const normalizedManagerName = normalizeName(currentManager);
                const managerData = managerStructure.get(normalizedManagerName);

                if (managerData) {
                    // Build hierarchy for this manager and their chain
                    hierarchyData = buildManagerHierarchyData(managerData.manager, filteredEmployees);
                } else {
                    showStatus('Selected manager not found in department.', 'error');
                    return;
                }
            } else {
                // Show full department hierarchy
                hierarchyData = buildHierarchyData(managerStructure, filteredEmployees);
            }

            document.getElementById('flowchartSection').style.display = 'block';
            renderCombinedFlowChart(hierarchyData);

            document.getElementById('resultsSection').style.display = 'block';
        }

        function buildManagerStructure(employees) {
            const managerMap = new Map();
            const employeeMap = new Map();

            // First create a map of all employees with normalized names for matching
            employees.forEach(emp => {
                const normalizedName = normalizeName(emp['Employee Name']);
                employeeMap.set(normalizedName, emp);
            });

            // Group employees by their reporting manager with enhanced fuzzy matching
            employees.forEach(emp => {
                const managerName = emp['Reporting Manager'];
                if (managerName && managerName.trim() !== '') {
                    const normalizedManagerName = normalizeName(managerName);

                    // Try to find the manager in the employee list
                    let managerDetails = employeeMap.get(normalizedManagerName);

                    // If manager not found, try to find a close match
                    if (!managerDetails) {
                        managerDetails = findBestMatch(managerName, employees);
                    }

                    // If manager still not found, create a placeholder
                    if (!managerDetails) {
                        managerDetails = {
                            'Employee Name': managerName,
                            'Job Profile': 'Manager (Details not found)',
                            'Location': 'N/A',
                            'Department': currentDepartment,
                            'Reporting Manager': ''
                        };
                        const normalizedManagerName = normalizeName(managerName);
                        employeeMap.set(normalizedManagerName, managerDetails);
                    }

                    // Find or create manager entry
                    const normalizedKey = normalizeName(managerDetails['Employee Name']);
                    if (!managerMap.has(normalizedKey)) {
                        managerMap.set(normalizedKey, {
                            manager: managerDetails,
                            employees: []
                        });
                    }

                    managerMap.get(normalizedKey).employees.push(emp);
                }
            });

            return managerMap;
        }

        function groupEmployeesByJobRole(employees) {
            const jobRoleGroups = new Map();

            employees.forEach(emp => {
                const jobRole = emp['Job Profile'] || 'Unknown Role';
                if (!jobRoleGroups.has(jobRole)) {
                    jobRoleGroups.set(jobRole, []);
                }
                jobRoleGroups.get(jobRole).push(emp);
            });

            return jobRoleGroups;
        }

        function generateSummaryStats(employees, managerStructure) {
            const totalEmployees = employees.length;
            const managersCount = managerStructure.size;

            const summaryHTML = `
                <div class="stat-card" onclick="showAllEmployees()">
                    <span class="stat-number">${totalEmployees}</span>
                    <span class="stat-label">Total Employees</span>
                </div>
                <div class="stat-card" onclick="showAllManagers()">
                    <span class="stat-number">${managersCount}</span>
                    <span class="stat-label">Reporting Managers</span>
                </div>
            `;

            document.getElementById('summaryStats').innerHTML = summaryHTML;
        }

        function showAllEmployees() {
            const deptEmployees = employeeData.filter(emp => emp.Department === currentDepartment);
            showEmployeeModal({
                name: `All Employees in ${currentDepartment}`,
                type: 'department',
                count: deptEmployees.length,
                employees: deptEmployees,
                fullName: `All ${deptEmployees.length} employees in ${currentDepartment}`
            }, true);
        }

        function showAllManagers() {
            const deptEmployees = employeeData.filter(emp => emp.Department === currentDepartment);
            const managerStructure = buildManagerStructure(deptEmployees);

            const managers = Array.from(managerStructure.values()).map(data => data.manager);

            showEmployeeModal({
                name: `All Managers in ${currentDepartment}`,
                type: 'managers',
                count: managers.length,
                employees: managers,
                fullName: `All ${managers.length} managers in ${currentDepartment}`
            }, true);
        }

        function buildHierarchyData(managerStructure, allEmployees) {
            const nodes = [];
            const links = [];
            let nodeId = 0;

            // Create a map of all employees for quick lookup (with normalized names)
            const employeeMap = new Map();
            allEmployees.forEach(emp => {
                const normalizedName = normalizeName(emp['Employee Name']);
                employeeMap.set(normalizedName, emp);
            });

            // Add department root node
            const rootNode = {
                id: nodeId++,
                name: `${currentDepartment} Department`,
                type: 'department',
                count: allEmployees.length,
                expanded: true
            };
            nodes.push(rootNode);

            // Create a map to track which employees have been processed
            const processedEmployees = new Set();

            // Function to recursively build manager hierarchy
            const buildManagerHierarchy = (managerName, parentNodeId) => {
                const normalizedManagerName = normalizeName(managerName);

                if (processedEmployees.has(normalizedManagerName)) return null; // Prevent cycles

                processedEmployees.add(normalizedManagerName);

                const managerData = managerStructure.get(normalizedManagerName);
                const managerDetails = managerData ? managerData.manager :
                    employeeMap.get(normalizedManagerName) || {
                        'Employee Name': managerName,
                        'Job Profile': 'Manager (Details not found)',
                        'Location': 'N/A',
                        'Department': currentDepartment,
                        'Reporting Manager': ''
                    };

                // Create manager node
                const managerNode = {
                    id: nodeId++,
                    name: managerDetails['Employee Name'] || 'Unknown',
                    type: 'manager',
                    count: managerData ? managerData.employees.length : 0,
                    employees: [managerDetails],
                    fullName: `${managerDetails['Employee Name']} - ${managerDetails['Job Profile']} (${managerDetails['Employee ID'] || 'N/A'})`,
                    expanded: false
                };
                nodes.push(managerNode);

                // Link to parent node
                if (parentNodeId !== undefined) {
                    links.push({
                        source: parentNodeId,
                        target: managerNode.id
                    });
                } else {
                    // Link to department root if no parent
                    links.push({
                        source: rootNode.id,
                        target: managerNode.id
                    });
                }

                // Process this manager's employees
                if (managerData) {
                    // First group by location
                    const locationGroups = new Map();
                    managerData.employees.forEach(emp => {
                        const location = emp['Location'] || 'Unknown Location';
                        if (!locationGroups.has(location)) {
                            locationGroups.set(location, []);
                        }
                        locationGroups.get(location).push(emp);
                    });

                    // Then for each location, group by job role
                    locationGroups.forEach((locationEmployees, location) => {
                        const locationNode = {
                            id: nodeId++,
                            name: location,
                            type: 'location',
                            count: locationEmployees.length,
                            employees: locationEmployees,
                            managerId: managerNode.id,
                            hidden: false,
                            fullName: `${location} (${locationEmployees.length} employees)`,
                            expanded: false
                        };
                        nodes.push(locationNode);

                        links.push({
                            source: managerNode.id,
                            target: locationNode.id
                        });

                        const jobRoleGroups = groupEmployeesByJobRole(locationEmployees);

                        jobRoleGroups.forEach((employees, jobRole) => {
                            const jobRoleNode = {
                                id: nodeId++,
                                name: jobRole,
                                type: 'job-role',
                                count: employees.length,
                                employees: employees,
                                managerId: managerNode.id,
                                hidden: false,
                                fullName: `${jobRole} (${employees.length} employees)`,
                                expanded: false
                            };
                            nodes.push(jobRoleNode);

                            links.push({
                                source: locationNode.id,
                                target: jobRoleNode.id
                            });

                            // Add individual employee nodes (hidden by default)
                            employees.forEach(emp => {
                                const employeeNode = {
                                    id: nodeId++,
                                    name: emp['Employee Name'],
                                    type: 'employee',
                                    count: 1,
                                    employees: [emp],
                                    managerId: managerNode.id,
                                    hidden: true,
                                    fullName: `${emp['Employee Name']} - ${emp['Job Profile']} (${emp['Employee ID'] || 'N/A'})`
                                };
                                nodes.push(employeeNode);

                                links.push({
                                    source: jobRoleNode.id,
                                    target: employeeNode.id
                                });

                                // Check if this employee is also a manager
                                const normalizedEmpName = normalizeName(emp['Employee Name']);
                                if (managerStructure.has(normalizedEmpName)) {
                                    buildManagerHierarchy(emp['Employee Name'], managerNode.id);
                                }
                            });
                        });
                    });
                }

                return managerNode;
            };

            // First process all employees without managers
            const employeesWithoutManagers = allEmployees.filter(emp =>
                !emp['Reporting Manager'] || emp['Reporting Manager'].trim() === ''
            );

            if (employeesWithoutManagers.length > 0) {
                // Group top-level employees by location first
                const locationGroups = new Map();
                employeesWithoutManagers.forEach(emp => {
                    const location = emp['Location'] || 'Unknown Location';
                    if (!locationGroups.has(location)) {
                        locationGroups.set(location, []);
                    }
                    locationGroups.get(location).push(emp);
                });

                locationGroups.forEach((locationEmployees, location) => {
                    const locationNode = {
                        id: nodeId++,
                        name: location,
                        type: 'location',
                        count: locationEmployees.length,
                        employees: locationEmployees,
                        fullName: `${location} (Top Level)`,
                        expanded: false
                    };
                    nodes.push(locationNode);

                    links.push({
                        source: rootNode.id,
                        target: locationNode.id
                    });

                    const jobRoleGroups = groupEmployeesByJobRole(locationEmployees);

                    jobRoleGroups.forEach((employees, jobRole) => {
                        const jobRoleNode = {
                            id: nodeId++,
                            name: jobRole,
                            type: 'top-level-role',
                            count: employees.length,
                            employees: employees,
                            fullName: `${jobRole} (Top Level)`,
                            expanded: false
                        };
                        nodes.push(jobRoleNode);

                        links.push({
                            source: locationNode.id,
                            target: jobRoleNode.id
                        });

                        // Add individual employee nodes for top-level employees (hidden by default)
                        employees.forEach(emp => {
                            const employeeNode = {
                                id: nodeId++,
                                name: emp['Employee Name'],
                                type: 'employee',
                                count: 1,
                                employees: [emp],
                                fullName: `${emp['Employee Name']} - ${emp['Job Profile']} (${emp['Employee ID'] || 'N/A'})`,
                                hidden: true
                            };
                            nodes.push(employeeNode);

                            links.push({
                                source: jobRoleNode.id,
                                target: employeeNode.id
                            });

                            // Check if this employee is also a manager
                            const normalizedEmpName = normalizeName(emp['Employee Name']);
                            if (managerStructure.has(normalizedEmpName)) {
                                buildManagerHierarchy(emp['Employee Name'], jobRoleNode.id);
                            }
                        });
                    });
                });
            }

            // Then process all managers who haven't been processed yet (managers who don't report to anyone in this department)
            managerStructure.forEach((data, normalizedManagerName) => {
                if (!processedEmployees.has(normalizedManagerName)) {
                    const managerName = data.manager['Employee Name'];
                    buildManagerHierarchy(managerName, rootNode.id);
                }
            });

            return { nodes, links };
        }

        function buildManagerHierarchyData(manager, allEmployees) {
            const nodes = [];
            const links = [];
            let nodeId = 0;

            // Create a map of all employees for quick lookup (with normalized names)
            const employeeMap = new Map();
            allEmployees.forEach(emp => {
                const normalizedName = normalizeName(emp['Employee Name']);
                employeeMap.set(normalizedName, emp);
            });

            // Create manager structure
            const managerStructure = buildManagerStructure(allEmployees);

            // Function to recursively build the chain of command upwards
            const buildUpwardHierarchy = (employee, processed) => {
                const normalizedName = normalizeName(employee['Employee Name']);
                if (processed.has(normalizedName)) return null;

                processed.add(normalizedName);

                // Create node for this employee
                const isManager = managerStructure.has(normalizedName);
                const nodeType = isManager ? 'manager' : 'employee';
                const node = {
                    id: nodeId++,
                    name: employee['Employee Name'],
                    type: nodeType,
                    count: isManager ? managerStructure.get(normalizedName).employees.length : 1,
                    employees: [employee],
                    fullName: `${employee['Employee Name']} - ${employee['Job Profile']} (${employee['Employee ID'] || 'N/A'})`,
                    expanded: false
                };
                nodes.push(node);

                // Process reporting manager
                const managerName = employee['Reporting Manager'];
                if (managerName && managerName.trim() !== '') {
                    const normalizedManagerName = normalizeName(managerName);
                    let managerDetails = employeeMap.get(normalizedManagerName);

                    // If manager not found, try to find a close match
                    if (!managerDetails) {
                        managerDetails = findBestMatch(managerName, allEmployees);
                    }

                    // If manager still not found, create a placeholder
                    if (!managerDetails) {
                        managerDetails = {
                            'Employee Name': managerName,
                            'Job Profile': 'Manager (Details not found)',
                            'Location': 'N/A',
                            'Department': currentDepartment,
                            'Reporting Manager': ''
                        };
                    }

                    const managerNode = buildUpwardHierarchy(managerDetails, processed);
                    if (managerNode) {
                        links.push({
                            source: managerNode.id,
                            target: node.id
                        });
                    }
                }

                return node;
            };

            // Function to recursively build the chain of command downwards
            const buildDownwardHierarchy = (managerName, parentNodeId) => {
                const normalizedManagerName = normalizeName(managerName);
                const managerData = managerStructure.get(normalizedManagerName);
                if (!managerData) return;

                // Create manager node if not already created
                let managerNode = nodes.find(n =>
                    n.type === 'manager' &&
                    normalizeName(n.name) === normalizedManagerName
                );

                if (!managerNode) {
                    managerNode = {
                        id: nodeId++,
                        name: managerData.manager['Employee Name'],
                        type: 'manager',
                        count: managerData.employees.length,
                        employees: [managerData.manager],
                        fullName: `${managerData.manager['Employee Name']} - ${managerData.manager['Job Profile']} (${managerData.manager['Employee ID'] || 'N/A'})`,
                        expanded: false
                    };
                    nodes.push(managerNode);

                    // Link to parent if provided
                    if (parentNodeId !== undefined) {
                        links.push({
                            source: parentNodeId,
                            target: managerNode.id
                        });
                    }
                }

                // Process this manager's employees
                // First group by location
                const locationGroups = new Map();
                managerData.employees.forEach(emp => {
                    const location = emp['Location'] || 'Unknown Location';
                    if (!locationGroups.has(location)) {
                        locationGroups.set(location, []);
                    }
                    locationGroups.get(location).push(emp);
                });

                // Then for each location, group by job role
                locationGroups.forEach((locationEmployees, location) => {
                    const locationNode = {
                        id: nodeId++,
                        name: location,
                        type: 'location',
                        count: locationEmployees.length,
                        employees: locationEmployees,
                        managerId: managerNode.id,
                        hidden: false,
                        fullName: `${location} (${locationEmployees.length} employees)`,
                        expanded: false
                    };
                    nodes.push(locationNode);

                    links.push({
                        source: managerNode.id,
                        target: locationNode.id
                    });

                    const jobRoleGroups = groupEmployeesByJobRole(locationEmployees);

                    jobRoleGroups.forEach((employees, jobRole) => {
                        const jobRoleNode = {
                            id: nodeId++,
                            name: jobRole,
                            type: 'job-role',
                            count: employees.length,
                            employees: employees,
                            managerId: managerNode.id,
                            hidden: false,
                            fullName: `${jobRole} (${employees.length} employees)`,
                            expanded: false
                        };
                        nodes.push(jobRoleNode);

                        links.push({
                            source: locationNode.id,
                            target: jobRoleNode.id
                        });

                        // Add individual employee nodes (hidden by default)
                        employees.forEach(emp => {
                            const employeeNode = {
                                id: nodeId++,
                                name: emp['Employee Name'],
                                type: 'employee',
                                count: 1,
                                employees: [emp],
                                managerId: managerNode.id,
                                hidden: true,
                                fullName: `${emp['Employee Name']} - ${emp['Job Profile']} (${emp['Employee ID'] || 'N/A'})`
                            };
                            nodes.push(employeeNode);

                            links.push({
                                source: jobRoleNode.id,
                                target: employeeNode.id
                            });

                            // Check if this employee is also a manager and build their hierarchy
                            const normalizedEmpName = normalizeName(emp['Employee Name']);
                            if (managerStructure.has(normalizedEmpName)) {
                                buildDownwardHierarchy(emp['Employee Name'], managerNode.id);
                            }
                        });
                    });
                });
            };

            // Build upward hierarchy first (managers above the selected manager)
            const processed = new Set();
            buildUpwardHierarchy(manager, processed);

            // Then build downward hierarchy (employees below the selected manager)
            buildDownwardHierarchy(manager['Employee Name']);

            return { nodes, links };
        }

        function renderHierarchyView() {
            if (!hierarchyData) return;

            const hierarchyContainer = document.getElementById('hierarchyTree');
            hierarchyContainer.innerHTML = '';

            // Find root node (either department or top manager)
            let rootNode;
            if (currentManager) {
                // Find the selected manager node
                rootNode = hierarchyData.nodes.find(node =>
                    node.type === 'manager' &&
                    node.name === currentManager
                );
            } else {
                // Find department node
                rootNode = hierarchyData.nodes.find(node => node.type === 'department');
            }

            if (!rootNode) return;

            // Recursive function to build hierarchy HTML
            const buildHierarchyHTML = (node, level = 0) => {
                const nodeElement = document.createElement('div');
                nodeElement.className = `hierarchy-node ${node.type}`;

                const titleElement = document.createElement('div');
                titleElement.className = 'hierarchy-node-title';
                titleElement.innerHTML = `
                    <span>${node.name}</span>
                    ${node.count ? `<span class="hierarchy-node-count">(${node.count})</span>` : ''}
                `;

                nodeElement.appendChild(titleElement);

                // Add click handler to expand/collapse
                if (node.type !== 'employee') {
                    nodeElement.addEventListener('click', (e) => {
                        // Don't toggle if clicking on a child element
                        if (e.target !== nodeElement && e.target !== titleElement) return;

                        const childrenContainer = nodeElement.querySelector('.hierarchy-children');
                        if (childrenContainer) {
                            childrenContainer.style.display = childrenContainer.style.display === 'none' ? 'block' : 'none';
                        } else {
                            // First click - load children
                            loadChildren(node, nodeElement);
                        }
                    });
                }

                return nodeElement;
            };

            // Function to load children nodes
            const loadChildren = (parentNode, parentElement) => {
                const childrenLinks = hierarchyData.links.filter(link => link.source === parentNode.id);
                const childrenNodes = childrenLinks.map(link =>
                    hierarchyData.nodes.find(node => node.id === link.target)
                ).filter(node => node && !node.hidden);

                if (childrenNodes.length === 0) return;

                const childrenContainer = document.createElement('div');
                childrenContainer.className = 'hierarchy-children';

                childrenNodes.forEach(childNode => {
                    const childElement = buildHierarchyHTML(childNode);
                    childrenContainer.appendChild(childElement);
                });

                parentElement.appendChild(childrenContainer);
            };

            // Build the root node
            const rootElement = buildHierarchyHTML(rootNode);
            hierarchyContainer.appendChild(rootElement);

            // Load first level of children by default
            loadChildren(rootNode, rootElement);
        }

        function renderCombinedFlowChart(data) {
            const container = d3.select('#flowchartContainer');
            container.selectAll("*").remove();

            // Calculate required dimensions based on hierarchy depth and breadth
            const hierarchyDepth = getHierarchyDepth(data);
            const hierarchyBreadth = getHierarchyBreadth(data);

            // Set very large dimensions to accommodate big hierarchies
            const width = Math.max(3000, hierarchyBreadth * 400);
            const height = Math.max(3000, hierarchyDepth * 250);
            const margin = { top: 40, right: 120, bottom: 40, left: 120 };

            const svg = container.append('svg')
                .attr('width', '100%')
                .attr('height', '100%')
                .attr('viewBox', `0 0 ${width} ${height}`)
                .call(d3.zoom()
                    .scaleExtent([0.1, 5])
                    .on('zoom', (event) => {
                        g.attr('transform', event.transform);
                        updateLinks(); // Update links when zooming/panning
                    }))
                .on('dblclick.zoom', null); // Disable double-click zoom

            const g = svg.append('g')
                .attr('transform', `translate(${margin.left},${margin.top})`);

            // Create hierarchical layout
            const root = d3.stratify()
                .id(d => d.id)
                .parentId(d => {
                    const link = data.links.find(l => l.target === d.id);
                    return link ? link.source : null;
                })(data.nodes);

            // Custom tree layout with dynamic spacing
            const treeLayout = d3.tree()
                .size([width - margin.left - margin.right, height - margin.top - margin.bottom])
                .separation((a, b) => (a.parent === b.parent ? 1 : 1.5) / a.depth);

            const treeData = treeLayout(root);

            // Create elbow links
            const links = g.selectAll('.link')
                .data(treeData.links().filter(d => !d.target.data.hidden))
                .enter().append('path')
                .attr('class', 'link')
                .style('fill', 'none')
                .style('stroke', '#666')
                .style('opacity', 0.8)
                .style('stroke-width', 1.5);

            // Update links initially
            updateLinks();

            // Get node dimensions based on current size setting
            const nodeDimensions = nodeSizePresets[customLayoutSettings.nodeSize];

            // Create nodes with double-tap functionality
            const node = g.selectAll('.node')
                .data(treeData.descendants().filter(d => !d.data.hidden))
                .enter().append('g')
                .attr('class', d => `node ${d.data.type}-node ${d.data.expanded ? 'expanded' : ''}`)
                .attr('transform', d => `translate(${d.x},${d.y})`)
                .on('click', function(event, d) {
                    const now = Date.now();
                    const isDoubleClick = (now - lastClickTime) < doubleClickThreshold;
                    lastClickTime = now;

                    if (isDoubleClick && (d.data.type === 'manager' || d.data.type === 'job-role' || d.data.type === 'top-level-role' || d.data.type === 'location')) {
                        // Double-click on manager or job role - show all employees directly
                        d3.select(this).classed('highlight', true);
                        setTimeout(() => d3.select(this).classed('highlight', false), 500);

                        // Collect all employees under this node
                        let allEmployees = [];
                        if (d.data.type === 'manager') {
                            data.nodes.forEach(n => {
                                if ((n.type === 'location' || n.type === 'job-role' || n.type === 'employee') && n.managerId === d.data.id) {
                                    allEmployees.push(...n.employees);
                                }
                            });
                        } else {
                            allEmployees = d.data.employees || [];
                        }

                        // Show in modal
                        showEmployeeModal({
                            name: d.data.name,
                            type: d.data.type,
                            count: allEmployees.length,
                            employees: allEmployees,
                            fullName: `All employees under ${d.data.name}`
                        });
                    } else if (d.data.type === 'manager' || d.data.type === 'job-role' || d.data.type === 'top-level-role' || d.data.type === 'location') {
                        // Single click - toggle expansion of children
                        const wasExpanded = d.data.expanded;
                        d.data.expanded = !wasExpanded;

                        // For managers, toggle employees visibility
                        if (d.data.type === 'manager') {
                            data.nodes.forEach(n => {
                                if (n.type === 'employee' && n.managerId === d.data.id) {
                                    n.hidden = !d.data.expanded;
                                }
                            });
                        }
                        // For job roles, toggle employees visibility
                        else if (d.data.type === 'job-role' || d.data.type === 'top-level-role' || d.data.type === 'location') {
                            data.nodes.forEach(n => {
                                if (n.type === 'employee' && data.links.some(l => l.source === d.data.id && l.target === n.id)) {
                                    n.hidden = !d.data.expanded;
                                }
                            });
                        }

                        renderCombinedFlowChart(data);
                    } else if (d.data.type === 'employee') {
                        // Single click on employee - show employee details
                        showEmployeeModal(d.data);
                    }
                })
                .on('mouseover', function(event, d) {
                    showTooltip(event, d.data);
                })
                .on('mouseout', hideTooltip);

            // Add rectangles for nodes with scaled dimensions
            node.append('rect')
                .attr('width', d => nodeDimensions[d.data.type].width)
                .attr('height', d => nodeDimensions[d.data.type].height)
                .attr('x', d => -nodeDimensions[d.data.type].width / 2)
                .attr('y', d => -nodeDimensions[d.data.type].height / 2)
                .style('stroke', d => {
                    switch(d.data.type) {
                        case 'department': return '#4D148C';
                        case 'manager': return d.data.expanded ? '#4D148C' : '#660099';
                        case 'job-role': return '#0071CE';
                        case 'employee': return '#0099D8';
                        case 'top-level-role': return '#0099D8';
                        case 'location': return '#FF6600';
                        default: return '#95a5a6';
                    }
                })
                .style('stroke-width', d => d.data.expanded ? '2px' : '1.5px');

            // Add text labels with scaled font size
            node.append('text')
                .attr('dy', '0.35em')
                .attr('text-anchor', 'middle')
                .style('font-size', d => `${nodeDimensions[d.data.type].fontSize}px`)
                .text(d => {
                    const maxLength = d.data.type === 'department' ? 20 : 15;
                    return d.data.name.length > maxLength ?
                           d.data.name.substring(0, maxLength) + '...' :
                           d.data.name;
                });

            // Add count labels for managers and roles
            node.filter(d => d.data.type === 'manager' || d.data.type === 'top-level-role' || d.data.type === 'job-role' || d.data.type === 'location')
                .append('text')
                .attr('dy', '1.2em')
                .attr('text-anchor', 'middle')
                .style('font-size', d => `${10}px`)
                .style('fill', '#666')
                .text(d => `(${d.data.count})`);

            function updateLinks() {
                links.attr('d', d => {
                    const sourceX = d.source.x;
                    const sourceY = d.source.y;
                    const targetX = d.target.x;
                    const targetY = d.target.y;

                    const elbowLength = customLayoutSettings.elbowLength;

                    return `M${sourceX},${sourceY}
                            V${sourceY + elbowLength}
                            H${targetX}
                            V${targetY}`;
                });
            }
        }

        function getHierarchyDepth(data) {
            let maxDepth = 0;
            const nodeMap = new Map();

            // Build node map
            data.nodes.forEach(node => {
                nodeMap.set(node.id, { ...node, depth: 0, children: [] });
            });

            // Build tree structure
            data.links.forEach(link => {
                const parent = nodeMap.get(link.source);
                const child = nodeMap.get(link.target);
                if (parent && child) {
                    parent.children.push(child);
                }
            });

            // Calculate depths
            const calculateDepth = (node, depth) => {
                node.depth = depth;
                maxDepth = Math.max(maxDepth, depth);
                node.children.forEach(child => calculateDepth(child, depth + 1));
            };

            // Start from root (assuming first node is root)
            if (data.nodes.length > 0) {
                calculateDepth(nodeMap.get(data.nodes[0].id), 0);
            }

            return maxDepth + 1; // Add 1 because depth starts at 0
        }

        function getHierarchyBreadth(data) {
            let maxBreadth = 0;
            const nodeMap = new Map();

            // Build node map
            data.nodes.forEach(node => {
                nodeMap.set(node.id, { ...node, breadth: 0, children: [] });
            });

            // Build tree structure
            data.links.forEach(link => {
                const parent = nodeMap.get(link.source);
                const child = nodeMap.get(link.target);
                if (parent && child) {
                    parent.children.push(child);
                }
            });

            // Calculate breadth at each level
            const levelMap = new Map();

            const calculateBreadth = (node, level) => {
                if (!levelMap.has(level)) {
                    levelMap.set(level, 0);
                }
                levelMap.set(level, levelMap.get(level) + 1);
                maxBreadth = Math.max(maxBreadth, levelMap.get(level));
                node.children.forEach(child => calculateBreadth(child, level + 1));
            };

            // Start from root (assuming first node is root)
            if (data.nodes.length > 0) {
                calculateBreadth(nodeMap.get(data.nodes[0].id), 0);
            }

            return maxBreadth;
        }

        function getMostCommonLocation(employees) {
            const locationCounts = {};
            employees.forEach(emp => {
                const location = emp['Location'] || 'N/A';
                locationCounts[location] = (locationCounts[location] || 0) + 1;
            });

            return Object.keys(locationCounts).reduce((a, b) =>
                locationCounts[a] > locationCounts[b] ? a : b
            );
        }

        function showEmployeeModal(nodeData, showTable = false) {
            const modal = document.getElementById('employeeModal');
            const modalTitle = document.getElementById('modalTitle');
            const modalContent = document.getElementById('modalContent');

            modalTitle.textContent = nodeData.fullName || `${nodeData.name} - Employee Details`;

            // Create expand/collapse controls if showing multiple employees
            let controlsHTML = '';
            if (nodeData.employees.length > 1) {
                controlsHTML = `
                    <div class="expand-collapse-controls">
                        <button class="expand-collapse-btn" onclick="expandAllGroups()">Expand All</button>
                        <button class="expand-collapse-btn" onclick="collapseAllGroups()">Collapse All</button>
                        ${showTable ? `<button class="expand-collapse-btn" onclick="toggleEmployeeTable()">Show Table View</button>` : ''}
                    </div>
                `;
            }

            // Group employees by job role if showing multiple employees
            let employeeCardsHTML = '';
            if (nodeData.employees.length > 1) {
                if (nodeData.type === 'manager') {
                    // Show manager details at the top
                    const manager = nodeData.employees[0]; // First employee is the manager
                    employeeCardsHTML += `
                        <div class="employee-card" style="margin-bottom: 20px;">
                            <h4>👨‍💼 Manager Details</h4>
                            <p><strong>Name:</strong> ${manager['Employee Name'] || 'N/A'}</p>
                            <p><strong>Employee ID:</strong> <span class="employee-id">${manager['Employee ID'] || 'N/A'}</span></p>
                            <p><strong>Job Profile:</strong> ${manager['Job Profile'] || 'N/A'}</p>
                            <p><strong>Department:</strong> ${manager['Department'] || 'N/A'}</p>
                            <p><strong>Location:</strong> <span class="employee-location">${manager['Location'] || 'N/A'}</span></p>
                            ${manager['Email'] ? `<p><strong>Email:</strong> ${manager['Email']}</p>` : ''}
                            ${manager['Phone'] ? `<p><strong>Phone:</strong> ${manager['Phone']}</p>` : ''}
                        </div>
                    `;
                }

                // Group by job role
                const jobRoleGroups = groupEmployeesByJobRole(nodeData.employees.filter(e => e !== nodeData.employees[0] || nodeData.type !== 'manager'));

                Array.from(jobRoleGroups.entries()).forEach(([jobRole, employees]) => {
                    employeeCardsHTML += `
                        <div class="job-role-group">
                            <div class="job-role-group-header" onclick="toggleGroup(this)">
                                <h4>${jobRole} (${employees.length})</h4>
                                <div>
                                    <span style="margin-right: 15px;">Location: ${getMostCommonLocation(employees)}</span>
                                    <span class="toggle-icon">▶</span>
                                </div>
                            </div>
                            <div class="job-role-group-content">
                                <ul class="employee-list">
                                    ${employees.map(emp => `
                                        <li class="employee-item">
                                            <div class="employee-info">
                                                <strong>${emp['Employee Name'] || 'N/A'}</strong>
                                                <span>${emp['Employee ID'] || 'N/A'} | ${emp['Location'] || 'N/A'}</span>
                                            </div>
                                            <div class="employee-actions">
                                                <button class="employee-action-btn" onclick="showSingleEmployee(event, ${JSON.stringify(emp).replace(/"/g, '&quot;')})">View</button>
                                            </div>
                                        </li>
                                    `).join('')}
                                </ul>
                            </div>
                        </div>
                    `;
                });

                // Add table view if requested
                if (showTable) {
                    employeeCardsHTML += `
                        <div class="expandable-section" id="employeeTableSection">
                            <div class="expandable-header" onclick="toggleSection('employeeTableSection')">
                                <h4>Table View</h4>
                                <span>▼</span>
                            </div>
                            <div class="expandable-content">
                                <table class="employee-table">
                                    <thead>
                                        <tr>
                                            <th>Name</th>
                                            <th>ID</th>
                                            <th>Job Profile</th>
                                            <th>Location</th>
                                            <th>Reporting Manager</th>
                                            <th>Email</th>
                                            <th>Phone</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        ${nodeData.employees.map(emp => `
                                            <tr>
                                                <td>${emp['Employee Name'] || 'N/A'}</td>
                                                <td>${emp['Employee ID'] || 'N/A'}</td>
                                                <td>${emp['Job Profile'] || 'N/A'}</td>
                                                <td>${emp['Location'] || 'N/A'}</td>
                                                <td>${emp['Reporting Manager'] || 'None'}</td>
                                                <td>${emp['Email'] || 'N/A'}</td>
                                                <td>${emp['Phone'] || 'N/A'}</td>
                                            </tr>
                                        `).join('')}
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    `;
                }
            } else if (nodeData.employees.length === 1) {
                // Single employee view
                const emp = nodeData.employees[0];
                employeeCardsHTML = `
                    <div class="employee-card">
                        <h4>${emp['Employee Name'] || 'N/A'}</h4>
                        <p><strong>Employee ID:</strong> <span class="employee-id">${emp['Employee ID'] || 'N/A'}</span></p>
                        <p><strong>Job Profile:</strong> ${emp['Job Profile'] || 'N/A'}</p>
                        <p><strong>Department:</strong> ${emp['Department'] || 'N/A'}</p>
                        <p><strong>Location:</strong> <span class="employee-location">${emp['Location'] || 'N/A'}</span></p>
                        <p><strong>Reporting Manager:</strong> ${emp['Reporting Manager'] || 'None'}</p>
                        ${emp['Email'] ? `<p><strong>Email:</strong> ${emp['Email']}</p>` : ''}
                        ${emp['Phone'] ? `<p><strong>Phone:</strong> ${emp['Phone']}</p>` : ''}
                    </div>
                `;
            }

            modalContent.innerHTML = controlsHTML + employeeCardsHTML;
            modal.classList.add('active');
        }

        function toggleGroup(header) {
            const group = header.parentElement;
            group.classList.toggle('expanded');
            const icon = group.querySelector('.toggle-icon');
            icon.textContent = group.classList.contains('expanded') ? '▼' : '▶';
        }

        function expandAllGroups() {
            document.querySelectorAll('.job-role-group').forEach(group => {
                group.classList.add('expanded');
                const icon = group.querySelector('.toggle-icon');
                if (icon) icon.textContent = '▼';
            });
        }

        function collapseAllGroups() {
            document.querySelectorAll('.job-role-group').forEach(group => {
                group.classList.remove('expanded');
                const icon = group.querySelector('.toggle-icon');
                if (icon) icon.textContent = '▶';
            });
        }

        function toggleSection(sectionId) {
            const section = document.getElementById(sectionId);
            section.classList.toggle('expanded');
            const icon = section.querySelector('.expandable-header span');
            icon.textContent = section.classList.contains('expanded') ? '▼' : '▶';
        }

        function toggleEmployeeTable() {
            const section = document.getElementById('employeeTableSection');
            if (section) {
                section.classList.toggle('expanded');
                const icon = section.querySelector('.expandable-header span');
                icon.textContent = section.classList.contains('expanded') ? '▼' : '▶';
            }
        }

        function showSingleEmployee(event, emp) {
            event.stopPropagation();
            showEmployeeModal({
                name: emp['Employee Name'],
                type: 'employee',
                count: 1,
                employees: [emp],
                fullName: `${emp['Employee Name']} - ${emp['Job Profile']} (${emp['Employee ID'] || 'N/A'})`
            });
        }

        function closeEmployeeModal() {
            document.getElementById('employeeModal').classList.remove('active');
        }

        function showTooltip(event, data) {
            const tooltip = document.getElementById('tooltip');
            tooltip.style.opacity = '1';
            tooltip.style.left = (event.pageX + 10) + 'px';
            tooltip.style.top = (event.pageY - 10) + 'px';

            let tooltipContent = `<strong>${data.fullName || data.name}</strong><br>`;
            tooltipContent += `Type: ${data.type.replace('-', ' ')}<br>`;

            if (data.count !== undefined) {
                tooltipContent += `Employees: ${data.count}<br>`;
            }

            if (data.employees && data.employees[0]) {
                const emp = data.employees[0];
                if (emp['Employee ID']) tooltipContent += `ID: ${emp['Employee ID']}<br>`;
                if (emp['Job Profile']) tooltipContent += `Job: ${emp['Job Profile']}<br>`;
                if (emp['Location']) tooltipContent += `Location: ${emp['Location']}<br>`;
                if (emp['Reporting Manager']) tooltipContent += `Manager: ${emp['Reporting Manager']}<br>`;
            }

            tooltip.innerHTML = tooltipContent;
        }

        function hideTooltip() {
            document.getElementById('tooltip').style.opacity = '0';
        }

        function showStatus(message, type) {
            const statusDiv = document.getElementById('status');
            statusDiv.innerHTML = message;
            statusDiv.className = `status ${type}`;
        }

        function saveChartAsImage() {
            const chartContainer = document.getElementById('flowchartContainer');

            // Take screenshot of just the chart container
            html2canvas(chartContainer, {
                backgroundColor: '#fff',
                scale: 2 // Higher quality
            }).then(canvas => {
                // Create download link
                const link = document.createElement('a');
                link.download = `${currentDepartment.replace(/[^a-z0-9]/gi, '_')}_hierarchy.png`;
                link.href = canvas.toDataURL('image/png');
                link.click();
            });
        }

        // Make functions available globally for HTML onclick handlers
        window.toggleGroup = toggleGroup;
        window.expandAllGroups = expandAllGroups;
        window.collapseAllGroups = collapseAllGroups;
        window.showSingleEmployee = showSingleEmployee;
        window.closeEmployeeModal = closeEmployeeModal;
        window.showAllEmployees = showAllEmployees;
        window.showAllManagers = showAllManagers;
        window.toggleSection = toggleSection;
        window.toggleEmployeeTable = toggleEmployeeTable;
    </script>
</body>
</html>
